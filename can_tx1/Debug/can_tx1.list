
can_tx1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005928  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005ab8  08005ab8  00006ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b24  08005b24  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b24  08005b24  00006b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b2c  08005b2c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b2c  08005b2c  00006b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005b34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000354  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b0  200003b0  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f51b  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001faa  00000000  00000000  000165a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00018558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0b  00000000  00000000  00019370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002299a  00000000  00000000  00019e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f644  00000000  00000000  0003c815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da3c3  00000000  00000000  0004be59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012621c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004244  00000000  00000000  00126260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0012a4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005aa0 	.word	0x08005aa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005aa0 	.word	0x08005aa0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <Ultrasonic_distance>:
/* USER CODE BEGIN 0 */

//================================================
//ULTRASONIC_FUNCTIONS===========================
void Ultrasonic_distance(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	//Send Trigger Signal to ultrasonic trigger pin
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b76:	480b      	ldr	r0, [pc, #44]	@ (8000ba4 <Ultrasonic_distance+0x38>)
 8000b78:	f002 fbb2 	bl	80032e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f000 fe9b 	bl	80018b8 <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b88:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <Ultrasonic_distance+0x38>)
 8000b8a:	f002 fba9 	bl	80032e0 <HAL_GPIO_WritePin>
	//Enable Timer counter
	__HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC1);
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <Ultrasonic_distance+0x3c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <Ultrasonic_distance+0x3c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f042 0202 	orr.w	r2, r2, #2
 8000b9c:	60da      	str	r2, [r3, #12]
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	20000130 	.word	0x20000130
 8000bac:	00000000 	.word	0x00000000

08000bb0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	//Capture Rising Edge
	if(isRisingCaptured == 0)
 8000bb8:	4b43      	ldr	r3, [pc, #268]	@ (8000cc8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d11a      	bne.n	8000bf8 <HAL_TIM_IC_CaptureCallback+0x48>
	{
		InputCaptureValue_1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4841      	ldr	r0, [pc, #260]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bc6:	f003 fb53 	bl	8004270 <HAL_TIM_ReadCapturedValue>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a40      	ldr	r2, [pc, #256]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000bce:	6013      	str	r3, [r2, #0]
		isRisingCaptured = 1;
 8000bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6a1a      	ldr	r2, [r3, #32]
 8000bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 020a 	bic.w	r2, r2, #10
 8000be4:	621a      	str	r2, [r3, #32]
 8000be6:	4b39      	ldr	r3, [pc, #228]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6a1a      	ldr	r2, [r3, #32]
 8000bec:	4b37      	ldr	r3, [pc, #220]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f042 0202 	orr.w	r2, r2, #2
 8000bf4:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);

	}

}
 8000bf6:	e05d      	b.n	8000cb4 <HAL_TIM_IC_CaptureCallback+0x104>
	else if(isRisingCaptured == 1)
 8000bf8:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d158      	bne.n	8000cb4 <HAL_TIM_IC_CaptureCallback+0x104>
		InputCaptureValue_2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	4831      	ldr	r0, [pc, #196]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c06:	f003 fb33 	bl	8004270 <HAL_TIM_ReadCapturedValue>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a31      	ldr	r2, [pc, #196]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c0e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000c10:	4b2e      	ldr	r3, [pc, #184]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	@ 0x24
		if(InputCaptureValue_2 > InputCaptureValue_1)
 8000c18:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d907      	bls.n	8000c34 <HAL_TIM_IC_CaptureCallback+0x84>
			InputCaptureDifference = InputCaptureValue_2 - InputCaptureValue_1;
 8000c24:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b29      	ldr	r3, [pc, #164]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e00f      	b.n	8000c54 <HAL_TIM_IC_CaptureCallback+0xa4>
		else if(InputCaptureValue_1 > InputCaptureValue_2)
 8000c34:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d909      	bls.n	8000c54 <HAL_TIM_IC_CaptureCallback+0xa4>
			InputCaptureDifference = (0xFFFF - InputCaptureValue_1) + InputCaptureValue_2;
 8000c40:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c4e:	33ff      	adds	r3, #255	@ 0xff
 8000c50:	4a21      	ldr	r2, [pc, #132]	@ (8000cd8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c52:	6013      	str	r3, [r2, #0]
		distance = InputCaptureDifference * 0.0173;
 8000c54:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd75 	bl	8000748 <__aeabi_ui2d>
 8000c5e:	a318      	add	r3, pc, #96	@ (adr r3, 8000cc0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c64:	f7ff fb04 	bl	8000270 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f7ff fde4 	bl	800083c <__aeabi_d2uiz>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c7a:	701a      	strb	r2, [r3, #0]
		isReadingFinished = 1;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
		isRisingCaptured = 0;
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c88:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	6a1a      	ldr	r2, [r3, #32]
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 020a 	bic.w	r2, r2, #10
 8000c96:	621a      	str	r2, [r3, #32]
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6a12      	ldr	r2, [r2, #32]
 8000ca2:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0202 	bic.w	r2, r2, #2
 8000cb2:	60da      	str	r2, [r3, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	f3af 8000 	nop.w
 8000cc0:	58e21965 	.word	0x58e21965
 8000cc4:	3f91b717 	.word	0x3f91b717
 8000cc8:	200001c2 	.word	0x200001c2
 8000ccc:	20000130 	.word	0x20000130
 8000cd0:	200001c4 	.word	0x200001c4
 8000cd4:	200001c8 	.word	0x200001c8
 8000cd8:	200001cc 	.word	0x200001cc
 8000cdc:	200001c0 	.word	0x200001c0
 8000ce0:	200001c1 	.word	0x200001c1

08000ce4 <HAL_CAN_RxFifo0MsgPendingCallback>:
    previousTime = currentTime;

}
*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000cee:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 fcf4 	bl	80026e0 <HAL_CAN_GetRxMessage>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8000cfe:	f000 fb29 	bl	8001354 <Error_Handler>

	if(RxHeader.DLC == 2)
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d102      	bne.n	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		datacheck = 1;
 8000d0a:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]


}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000254 	.word	0x20000254
 8000d1c:	20000230 	.word	0x20000230
 8000d20:	200001d0 	.word	0x200001d0

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 fd53 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f8b5 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 faaf 	bl	8001294 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d36:	f000 f9bf 	bl	80010b8 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000d3a:	f000 f919 	bl	8000f70 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d3e:	f000 f969 	bl	8001014 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000d42:	f000 fa0d 	bl	8001160 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000d46:	f000 fa7b 	bl	8001240 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

HAL_CAN_Start(&hcan1);
 8000d4a:	4845      	ldr	r0, [pc, #276]	@ (8000e60 <main+0x13c>)
 8000d4c:	f001 fbb4 	bl	80024b8 <HAL_CAN_Start>
  while (1)
  {
	  //MQ3_START.............................................................

	  	 	  // ADC Single conversion mode -- Polling
	  	 	  HAL_ADC_Start(&hadc1);
 8000d50:	4844      	ldr	r0, [pc, #272]	@ (8000e64 <main+0x140>)
 8000d52:	f000 fe19 	bl	8001988 <HAL_ADC_Start>
	  	 	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d56:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d5a:	4842      	ldr	r0, [pc, #264]	@ (8000e64 <main+0x140>)
 8000d5c:	f000 ff19 	bl	8001b92 <HAL_ADC_PollForConversion>
	  	 	  mq = HAL_ADC_GetValue(&hadc1);
 8000d60:	4840      	ldr	r0, [pc, #256]	@ (8000e64 <main+0x140>)
 8000d62:	f000 ffa1 	bl	8001ca8 <HAL_ADC_GetValue>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <main+0x144>)
 8000d6c:	701a      	strb	r2, [r3, #0]
	  	 	  HAL_ADC_Stop(&hadc1);
 8000d6e:	483d      	ldr	r0, [pc, #244]	@ (8000e64 <main+0x140>)
 8000d70:	f000 fedc 	bl	8001b2c <HAL_ADC_Stop>

	  	 	  //LM35_BEGIN...............................................................



	  	 	 	  	  HAL_ADC_Start(&hadc2);
 8000d74:	483d      	ldr	r0, [pc, #244]	@ (8000e6c <main+0x148>)
 8000d76:	f000 fe07 	bl	8001988 <HAL_ADC_Start>
	  	 	 	  	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000d7a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d7e:	483b      	ldr	r0, [pc, #236]	@ (8000e6c <main+0x148>)
 8000d80:	f000 ff07 	bl	8001b92 <HAL_ADC_PollForConversion>
	  	 	 	  	  lm = HAL_ADC_GetValue(&hadc2);
 8000d84:	4839      	ldr	r0, [pc, #228]	@ (8000e6c <main+0x148>)
 8000d86:	f000 ff8f 	bl	8001ca8 <HAL_ADC_GetValue>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b38      	ldr	r3, [pc, #224]	@ (8000e70 <main+0x14c>)
 8000d90:	701a      	strb	r2, [r3, #0]
	  	 	 	  	  HAL_ADC_Stop(&hadc2);
 8000d92:	4836      	ldr	r0, [pc, #216]	@ (8000e6c <main+0x148>)
 8000d94:	f000 feca 	bl	8001b2c <HAL_ADC_Stop>




	  	 	 	  	//ULTRASONIC_START...........................
	  	 	 	  		Ultrasonic_distance();
 8000d98:	f7ff fee8 	bl	8000b6c <Ultrasonic_distance>
	  	 	 	  		//Calculate_Speed();
	  	 	 	  	//ULTRASONIC_STOP...........................

	  //can_message_sending........................................
	  //SENDING===================================================
	  	 	 	  TxHeader.DLC = 3;
 8000d9c:	4b35      	ldr	r3, [pc, #212]	@ (8000e74 <main+0x150>)
 8000d9e:	2203      	movs	r2, #3
 8000da0:	611a      	str	r2, [r3, #16]
	  	 	 	  TxHeader.IDE = CAN_ID_STD;
 8000da2:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <main+0x150>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
	  	 	 	  TxHeader.RTR = CAN_RTR_DATA;
 8000da8:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <main+0x150>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
	  	 	 	  TxHeader.StdId = 0x446;
 8000dae:	4b31      	ldr	r3, [pc, #196]	@ (8000e74 <main+0x150>)
 8000db0:	f240 4246 	movw	r2, #1094	@ 0x446
 8000db4:	601a      	str	r2, [r3, #0]
	  	 	 	  TxHeader.ExtId = 0x00;
 8000db6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <main+0x150>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
	  	 	 	  TxHeader.TransmitGlobalTime = DISABLE;
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <main+0x150>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	751a      	strb	r2, [r3, #20]
	  	 	 	  TxData[0]=mq;
 8000dc2:	4b29      	ldr	r3, [pc, #164]	@ (8000e68 <main+0x144>)
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e78 <main+0x154>)
 8000dc8:	701a      	strb	r2, [r3, #0]
	  	 	 	  TxData[1]=lm;
 8000dca:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <main+0x14c>)
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	4b2a      	ldr	r3, [pc, #168]	@ (8000e78 <main+0x154>)
 8000dd0:	705a      	strb	r2, [r3, #1]
	  	 	 	  TxData[2]=distance;
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e7c <main+0x158>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b27      	ldr	r3, [pc, #156]	@ (8000e78 <main+0x154>)
 8000dda:	709a      	strb	r2, [r3, #2]

	  	 	 	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <main+0x15c>)
 8000dde:	4a26      	ldr	r2, [pc, #152]	@ (8000e78 <main+0x154>)
 8000de0:	4924      	ldr	r1, [pc, #144]	@ (8000e74 <main+0x150>)
 8000de2:	481f      	ldr	r0, [pc, #124]	@ (8000e60 <main+0x13c>)
 8000de4:	f001 fbac 	bl	8002540 <HAL_CAN_AddTxMessage>
	  	 	 	//SENT======================================================


	  	 	 	                     HAL_Delay(500);
 8000de8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dec:	f000 fd64 	bl	80018b8 <HAL_Delay>
	  	 	 		 	  			  if(datacheck){
 8000df0:	4b24      	ldr	r3, [pc, #144]	@ (8000e84 <main+0x160>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d018      	beq.n	8000e2a <main+0x106>
	  	 	 		 	  				  for(int i = 0; i<RxData[1]; i++){
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	e00c      	b.n	8000e18 <main+0xf4>
	  	 	 		 	  					  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000dfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e02:	4821      	ldr	r0, [pc, #132]	@ (8000e88 <main+0x164>)
 8000e04:	f002 fa85 	bl	8003312 <HAL_GPIO_TogglePin>
	  	 	 		 	  					  HAL_Delay(RxData[0]);
 8000e08:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <main+0x168>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fd53 	bl	80018b8 <HAL_Delay>
	  	 	 		 	  				  for(int i = 0; i<RxData[1]; i++){
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3301      	adds	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <main+0x168>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4293      	cmp	r3, r2
 8000e22:	dbec      	blt.n	8000dfe <main+0xda>
	  	 	 		 	  			  	  }
	  	 	 		 	  				  datacheck = 0;
 8000e24:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <main+0x160>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
	  	 	 		 	  			  }

	  	 	 		 sprintf(str,"mq3=%d\r\nlm=%d\r\ndistance=%d\r\n", mq,lm,distance);
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <main+0x144>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <main+0x14c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <main+0x158>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4913      	ldr	r1, [pc, #76]	@ (8000e90 <main+0x16c>)
 8000e42:	4814      	ldr	r0, [pc, #80]	@ (8000e94 <main+0x170>)
 8000e44:	f004 f98c 	bl	8005160 <siprintf>
	  	 	 		HAL_UART_Transmit(&huart2,(uint8_t*)str, sizeof(str), HAL_MAX_DELAY);
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e4c:	2240      	movs	r2, #64	@ 0x40
 8000e4e:	4911      	ldr	r1, [pc, #68]	@ (8000e94 <main+0x170>)
 8000e50:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <main+0x174>)
 8000e52:	f003 fdc9 	bl	80049e8 <HAL_UART_Transmit>
	  	 	 		HAL_Delay(500);
 8000e56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e5a:	f000 fd2d 	bl	80018b8 <HAL_Delay>
	  	 	  HAL_ADC_Start(&hadc1);
 8000e5e:	e777      	b.n	8000d50 <main+0x2c>
 8000e60:	20000108 	.word	0x20000108
 8000e64:	20000078 	.word	0x20000078
 8000e68:	200001d4 	.word	0x200001d4
 8000e6c:	200000c0 	.word	0x200000c0
 8000e70:	200001d5 	.word	0x200001d5
 8000e74:	20000218 	.word	0x20000218
 8000e78:	2000024c 	.word	0x2000024c
 8000e7c:	200001c0 	.word	0x200001c0
 8000e80:	2000025c 	.word	0x2000025c
 8000e84:	200001d0 	.word	0x200001d0
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	20000254 	.word	0x20000254
 8000e90:	08005ab8 	.word	0x08005ab8
 8000e94:	200001d8 	.word	0x200001d8
 8000e98:	20000178 	.word	0x20000178

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b094      	sub	sp, #80	@ 0x50
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0320 	add.w	r3, r7, #32
 8000ea6:	2230      	movs	r2, #48	@ 0x30
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 f978 	bl	80051a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <SystemClock_Config+0xcc>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	4a27      	ldr	r2, [pc, #156]	@ (8000f68 <SystemClock_Config+0xcc>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed0:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <SystemClock_Config+0xcc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	4b22      	ldr	r3, [pc, #136]	@ (8000f6c <SystemClock_Config+0xd0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a21      	ldr	r2, [pc, #132]	@ (8000f6c <SystemClock_Config+0xd0>)
 8000ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <SystemClock_Config+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000efc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f02:	2302      	movs	r3, #2
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f10:	23a8      	movs	r3, #168	@ 0xa8
 8000f12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 0320 	add.w	r3, r7, #32
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fa11 	bl	8003348 <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f2c:	f000 fa12 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	230f      	movs	r3, #15
 8000f32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f34:	2302      	movs	r3, #2
 8000f36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fc72 	bl	8003838 <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f5a:	f000 f9fb 	bl	8001354 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	@ 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000

08000f70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000f84:	4a21      	ldr	r2, [pc, #132]	@ (800100c <MX_ADC1_Init+0x9c>)
 8000f86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000f8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000fb2:	4a17      	ldr	r2, [pc, #92]	@ (8001010 <MX_ADC1_Init+0xa0>)
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd0:	480d      	ldr	r0, [pc, #52]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000fd2:	f000 fc95 	bl	8001900 <HAL_ADC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f000 f9ba 	bl	8001354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_ADC1_Init+0x98>)
 8000ff2:	f000 fe67 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ffc:	f000 f9aa 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000078 	.word	0x20000078
 800100c:	40012000 	.word	0x40012000
 8001010:	0f000001 	.word	0x0f000001

08001014 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001028:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <MX_ADC2_Init+0x9c>)
 800102a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_ADC2_Init+0x98>)
 800102e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001032:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001034:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_ADC2_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <MX_ADC2_Init+0xa0>)
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_ADC2_Init+0x98>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001062:	2201      	movs	r2, #1
 8001064:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001076:	f000 fc43 	bl	8001900 <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001080:	f000 f968 	bl	8001354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001084:	2301      	movs	r3, #1
 8001086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_ADC2_Init+0x98>)
 8001096:	f000 fe15 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80010a0:	f000 f958 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000c0 	.word	0x200000c0
 80010b0:	40012100 	.word	0x40012100
 80010b4:	0f000001 	.word	0x0f000001

080010b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010be:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010c0:	4a26      	ldr	r2, [pc, #152]	@ (800115c <MX_CAN1_Init+0xa4>)
 80010c2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010c6:	2215      	movs	r2, #21
 80010c8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010ca:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d0:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80010d6:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010dc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <MX_CAN1_Init+0xa0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_CAN1_Init+0xa0>)
 8001104:	2200      	movs	r2, #0
 8001106:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001108:	4813      	ldr	r0, [pc, #76]	@ (8001158 <MX_CAN1_Init+0xa0>)
 800110a:	f000 fff9 	bl	8002100 <HAL_CAN_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001114:	f000 f91e 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001118:	2301      	movs	r3, #1
 800111a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 8001124:	f242 0360 	movw	r3, #8288	@ 0x2060
 8001128:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 8001132:	f242 0360 	movw	r3, #8288	@ 0x2060
 8001136:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800113c:	2301      	movs	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;
 8001140:	230e      	movs	r3, #14
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <MX_CAN1_Init+0xa0>)
 800114a:	f001 f8d5 	bl	80022f8 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	@ 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000108 	.word	0x20000108
 800115c:	40006400 	.word	0x40006400

08001160 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800118a:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <MX_TIM4_Init+0xd8>)
 800118c:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <MX_TIM4_Init+0xdc>)
 800118e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001190:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <MX_TIM4_Init+0xd8>)
 8001192:	2253      	movs	r2, #83	@ 0x53
 8001194:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <MX_TIM4_Init+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <MX_TIM4_Init+0xd8>)
 800119e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <MX_TIM4_Init+0xd8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011aa:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <MX_TIM4_Init+0xd8>)
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011b0:	4821      	ldr	r0, [pc, #132]	@ (8001238 <MX_TIM4_Init+0xd8>)
 80011b2:	f002 fd61 	bl	8003c78 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80011bc:	f000 f8ca 	bl	8001354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	4619      	mov	r1, r3
 80011cc:	481a      	ldr	r0, [pc, #104]	@ (8001238 <MX_TIM4_Init+0xd8>)
 80011ce:	f002 ff87 	bl	80040e0 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80011d8:	f000 f8bc 	bl	8001354 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80011dc:	4816      	ldr	r0, [pc, #88]	@ (8001238 <MX_TIM4_Init+0xd8>)
 80011de:	f002 fd9a 	bl	8003d16 <HAL_TIM_IC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80011e8:	f000 f8b4 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	480f      	ldr	r0, [pc, #60]	@ (8001238 <MX_TIM4_Init+0xd8>)
 80011fc:	f003 fb14 	bl	8004828 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001206:	f000 f8a5 	bl	8001354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800120e:	2301      	movs	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_TIM4_Init+0xd8>)
 8001222:	f002 fec1 	bl	8003fa8 <HAL_TIM_IC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800122c:	f000 f892 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	@ 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000130 	.word	0x20000130
 800123c:	40000800 	.word	0x40000800

08001240 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <MX_USART2_UART_Init+0x50>)
 8001248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001278:	f003 fb66 	bl	8004948 <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001282:	f000 f867 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000178 	.word	0x20000178
 8001290:	40004400 	.word	0x40004400

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b27      	ldr	r3, [pc, #156]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a26      	ldr	r2, [pc, #152]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b24      	ldr	r3, [pc, #144]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b20      	ldr	r3, [pc, #128]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a1f      	ldr	r2, [pc, #124]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a18      	ldr	r2, [pc, #96]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b16      	ldr	r3, [pc, #88]	@ (800134c <MX_GPIO_Init+0xb8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_GPIO_Init+0xb8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a11      	ldr	r2, [pc, #68]	@ (800134c <MX_GPIO_Init+0xb8>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_GPIO_Init+0xb8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001320:	480b      	ldr	r0, [pc, #44]	@ (8001350 <MX_GPIO_Init+0xbc>)
 8001322:	f001 ffdd 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001326:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_GPIO_Init+0xbc>)
 8001340:	f001 fe32 	bl	8002fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	@ 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40020c00 	.word	0x40020c00

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <Error_Handler+0x8>

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <HAL_MspInit+0x4c>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_MspInit+0x4c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	@ 0x40
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800139e:	2007      	movs	r0, #7
 80013a0:	f001 fdc0 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001488 <HAL_ADC_MspInit+0xd8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d128      	bne.n	8001424 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	4b2d      	ldr	r3, [pc, #180]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	4a2c      	ldr	r2, [pc, #176]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e2:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a25      	ldr	r2, [pc, #148]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800140a:	2301      	movs	r3, #1
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4619      	mov	r1, r3
 800141c:	481c      	ldr	r0, [pc, #112]	@ (8001490 <HAL_ADC_MspInit+0xe0>)
 800141e:	f001 fdc3 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001422:	e02c      	b.n	800147e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1a      	ldr	r2, [pc, #104]	@ (8001494 <HAL_ADC_MspInit+0xe4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d127      	bne.n	800147e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	4a15      	ldr	r2, [pc, #84]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 8001438:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143c:	6453      	str	r3, [r2, #68]	@ 0x44
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_ADC_MspInit+0xdc>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <HAL_ADC_MspInit+0xe0>)
 800147a:	f001 fd95 	bl	8002fa8 <HAL_GPIO_Init>
}
 800147e:	bf00      	nop
 8001480:	3730      	adds	r7, #48	@ 0x30
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40012000 	.word	0x40012000
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000
 8001494:	40012100 	.word	0x40012100

08001498 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1d      	ldr	r2, [pc, #116]	@ (800152c <HAL_CAN_MspInit+0x94>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d134      	bne.n	8001524 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <HAL_CAN_MspInit+0x98>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001530 <HAL_CAN_MspInit+0x98>)
 80014c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <HAL_CAN_MspInit+0x98>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_CAN_MspInit+0x98>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a14      	ldr	r2, [pc, #80]	@ (8001530 <HAL_CAN_MspInit+0x98>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_CAN_MspInit+0x98>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001504:	2309      	movs	r3, #9
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4809      	ldr	r0, [pc, #36]	@ (8001534 <HAL_CAN_MspInit+0x9c>)
 8001510:	f001 fd4a 	bl	8002fa8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2014      	movs	r0, #20
 800151a:	f001 fd0e 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800151e:	2014      	movs	r0, #20
 8001520:	f001 fd27 	bl	8002f72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	@ 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40006400 	.word	0x40006400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1d      	ldr	r2, [pc, #116]	@ (80015cc <HAL_TIM_Base_MspInit+0x94>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d134      	bne.n	80015c4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <HAL_TIM_Base_MspInit+0x98>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a1b      	ldr	r2, [pc, #108]	@ (80015d0 <HAL_TIM_Base_MspInit+0x98>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_TIM_Base_MspInit+0x98>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <HAL_TIM_Base_MspInit+0x98>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <HAL_TIM_Base_MspInit+0x98>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_TIM_Base_MspInit+0x98>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015a4:	2302      	movs	r3, #2
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4809      	ldr	r0, [pc, #36]	@ (80015d4 <HAL_TIM_Base_MspInit+0x9c>)
 80015b0:	f001 fcfa 	bl	8002fa8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	201e      	movs	r0, #30
 80015ba:	f001 fcbe 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015be:	201e      	movs	r0, #30
 80015c0:	f001 fcd7 	bl	8002f72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	@ 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40000800 	.word	0x40000800
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020c00 	.word	0x40020c00

080015d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_UART_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12b      	bne.n	8001652 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_UART_MspInit+0x88>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_UART_MspInit+0x88>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_UART_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_UART_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_UART_MspInit+0x88>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_UART_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001632:	230c      	movs	r3, #12
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001642:	2307      	movs	r3, #7
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_UART_MspInit+0x8c>)
 800164e:	f001 fcab 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	@ 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40004400 	.word	0x40004400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <NMI_Handler+0x4>

08001670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <MemManage_Handler+0x4>

08001680 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <UsageFault_Handler+0x4>

08001690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016be:	f000 f8db 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <CAN1_RX0_IRQHandler+0x10>)
 80016ce:	f001 f929 	bl	8002924 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000108 	.word	0x20000108

080016dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <TIM4_IRQHandler+0x10>)
 80016e2:	f002 fb71 	bl	8003dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000130 	.word	0x20000130

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f003 fd46 	bl	80051b0 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20020000 	.word	0x20020000
 8001750:	00000400 	.word	0x00000400
 8001754:	20000260 	.word	0x20000260
 8001758:	200003b0 	.word	0x200003b0

0800175c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	@ (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001784:	f7ff ffea 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f003 fd05 	bl	80051bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff fab7 	bl	8000d24 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017c4:	08005b34 	.word	0x08005b34
  ldr r2, =_sbss
 80017c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017cc:	200003b0 	.word	0x200003b0

080017d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001814 <HAL_Init+0x40>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_Init+0x40>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_Init+0x40>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f001 fb91 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fdaa 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023c00 	.word	0x40023c00

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fba9 	bl	8002f8e <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001854:	f001 fb71 	bl	8002f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000000 	.word	0x20000000
 8001870:	20000008 	.word	0x20000008
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20000264 	.word	0x20000264

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000264 	.word	0x20000264

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e033      	b.n	800197e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fd46 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001946:	f023 0302 	bic.w	r3, r3, #2
 800194a:	f043 0202 	orr.w	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fad8 	bl	8001f08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40
 800196e:	e001      	b.n	8001974 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Start+0x1a>
 800199e:	2302      	movs	r3, #2
 80019a0:	e0b2      	b.n	8001b08 <HAL_ADC_Start+0x180>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d018      	beq.n	80019ea <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019c8:	4b52      	ldr	r3, [pc, #328]	@ (8001b14 <HAL_ADC_Start+0x18c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a52      	ldr	r2, [pc, #328]	@ (8001b18 <HAL_ADC_Start+0x190>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0c9a      	lsrs	r2, r3, #18
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019dc:	e002      	b.n	80019e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f9      	bne.n	80019de <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d17a      	bne.n	8001aee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a22:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a36:	d106      	bne.n	8001a46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3c:	f023 0206 	bic.w	r2, r3, #6
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a44:	e002      	b.n	8001a4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a54:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <HAL_ADC_Start+0x194>)
 8001a56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a60:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d12a      	bne.n	8001ac4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a2b      	ldr	r2, [pc, #172]	@ (8001b20 <HAL_ADC_Start+0x198>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d015      	beq.n	8001aa4 <HAL_ADC_Start+0x11c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a29      	ldr	r2, [pc, #164]	@ (8001b24 <HAL_ADC_Start+0x19c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d105      	bne.n	8001a8e <HAL_ADC_Start+0x106>
 8001a82:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <HAL_ADC_Start+0x194>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00a      	beq.n	8001aa4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a25      	ldr	r2, [pc, #148]	@ (8001b28 <HAL_ADC_Start+0x1a0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d136      	bne.n	8001b06 <HAL_ADC_Start+0x17e>
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <HAL_ADC_Start+0x194>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d130      	bne.n	8001b06 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d129      	bne.n	8001b06 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	e020      	b.n	8001b06 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a15      	ldr	r2, [pc, #84]	@ (8001b20 <HAL_ADC_Start+0x198>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d11b      	bne.n	8001b06 <HAL_ADC_Start+0x17e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d114      	bne.n	8001b06 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e00b      	b.n	8001b06 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f043 0210 	orr.w	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	f043 0201 	orr.w	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	20000000 	.word	0x20000000
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	40012300 	.word	0x40012300
 8001b20:	40012000 	.word	0x40012000
 8001b24:	40012100 	.word	0x40012100
 8001b28:	40012200 	.word	0x40012200

08001b2c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Stop+0x16>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e021      	b.n	8001b86 <HAL_ADC_Stop+0x5a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bae:	d113      	bne.n	8001bd8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	f043 0220 	orr.w	r2, r3, #32
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e063      	b.n	8001ca0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd8:	f7ff fe62 	bl	80018a0 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bde:	e021      	b.n	8001c24 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001be6:	d01d      	beq.n	8001c24 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d007      	beq.n	8001bfe <HAL_ADC_PollForConversion+0x6c>
 8001bee:	f7ff fe57 	bl	80018a0 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d212      	bcs.n	8001c24 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d00b      	beq.n	8001c24 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f043 0204 	orr.w	r2, r3, #4
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e03d      	b.n	8001ca0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d1d6      	bne.n	8001be0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0212 	mvn.w	r2, #18
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d123      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11f      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c64:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d006      	beq.n	8001c7a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d111      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1c>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e105      	b.n	8001eec <HAL_ADC_ConfigChannel+0x228>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	d925      	bls.n	8001d3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68d9      	ldr	r1, [r3, #12]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	3b1e      	subs	r3, #30
 8001d06:	2207      	movs	r2, #7
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	400a      	ands	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68d9      	ldr	r1, [r3, #12]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	4603      	mov	r3, r0
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4403      	add	r3, r0
 8001d2e:	3b1e      	subs	r3, #30
 8001d30:	409a      	lsls	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	e022      	b.n	8001d82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6919      	ldr	r1, [r3, #16]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	2207      	movs	r2, #7
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6919      	ldr	r1, [r3, #16]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	4603      	mov	r3, r0
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4403      	add	r3, r0
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d824      	bhi.n	8001dd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b05      	subs	r3, #5
 8001d9c:	221f      	movs	r2, #31
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	400a      	ands	r2, r1
 8001daa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4618      	mov	r0, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b05      	subs	r3, #5
 8001dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dd2:	e04c      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d824      	bhi.n	8001e26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	3b23      	subs	r3, #35	@ 0x23
 8001dee:	221f      	movs	r2, #31
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43da      	mvns	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	3b23      	subs	r3, #35	@ 0x23
 8001e18:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e24:	e023      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b41      	subs	r3, #65	@ 0x41
 8001e38:	221f      	movs	r2, #31
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	400a      	ands	r2, r1
 8001e46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b41      	subs	r3, #65	@ 0x41
 8001e62:	fa00 f203 	lsl.w	r2, r0, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x234>)
 8001e70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a21      	ldr	r2, [pc, #132]	@ (8001efc <HAL_ADC_ConfigChannel+0x238>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d109      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x1cc>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b12      	cmp	r3, #18
 8001e82:	d105      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a19      	ldr	r2, [pc, #100]	@ (8001efc <HAL_ADC_ConfigChannel+0x238>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d123      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x21e>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d003      	beq.n	8001eaa <HAL_ADC_ConfigChannel+0x1e6>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b11      	cmp	r3, #17
 8001ea8:	d11b      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d111      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <HAL_ADC_ConfigChannel+0x23c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a10      	ldr	r2, [pc, #64]	@ (8001f04 <HAL_ADC_ConfigChannel+0x240>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	0c9a      	lsrs	r2, r3, #18
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ed4:	e002      	b.n	8001edc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f9      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40012300 	.word	0x40012300
 8001efc:	40012000 	.word	0x40012000
 8001f00:	20000000 	.word	0x20000000
 8001f04:	431bde83 	.word	0x431bde83

08001f08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f10:	4b79      	ldr	r3, [pc, #484]	@ (80020f8 <ADC_Init+0x1f0>)
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	021a      	lsls	r2, r3, #8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6899      	ldr	r1, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	4a58      	ldr	r2, [pc, #352]	@ (80020fc <ADC_Init+0x1f4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d022      	beq.n	8001fe6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6899      	ldr	r1, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6899      	ldr	r1, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	e00f      	b.n	8002006 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002004:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0202 	bic.w	r2, r2, #2
 8002014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7e1b      	ldrb	r3, [r3, #24]
 8002020:	005a      	lsls	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002042:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002052:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	3b01      	subs	r3, #1
 8002060:	035a      	lsls	r2, r3, #13
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	e007      	b.n	800207c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800207a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800208a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	3b01      	subs	r3, #1
 8002098:	051a      	lsls	r2, r3, #20
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020be:	025a      	lsls	r2, r3, #9
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6899      	ldr	r1, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	029a      	lsls	r2, r3, #10
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40012300 	.word	0x40012300
 80020fc:	0f000001 	.word	0x0f000001

08002100 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0ed      	b.n	80022ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff f9ba 	bl	8001498 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002134:	f7ff fbb4 	bl	80018a0 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800213a:	e012      	b.n	8002162 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800213c:	f7ff fbb0 	bl	80018a0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b0a      	cmp	r3, #10
 8002148:	d90b      	bls.n	8002162 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2205      	movs	r2, #5
 800215a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0c5      	b.n	80022ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0e5      	beq.n	800213c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0202 	bic.w	r2, r2, #2
 800217e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002180:	f7ff fb8e 	bl	80018a0 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002186:	e012      	b.n	80021ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002188:	f7ff fb8a 	bl	80018a0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b0a      	cmp	r3, #10
 8002194:	d90b      	bls.n	80021ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2205      	movs	r2, #5
 80021a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e09f      	b.n	80022ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e5      	bne.n	8002188 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7e1b      	ldrb	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e007      	b.n	80021e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7e5b      	ldrb	r3, [r3, #25]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d108      	bne.n	8002200 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e007      	b.n	8002210 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800220e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7e9b      	ldrb	r3, [r3, #26]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d108      	bne.n	800222a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0220 	orr.w	r2, r2, #32
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e007      	b.n	800223a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0220 	bic.w	r2, r2, #32
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7edb      	ldrb	r3, [r3, #27]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0210 	bic.w	r2, r2, #16
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e007      	b.n	8002264 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0210 	orr.w	r2, r2, #16
 8002262:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7f1b      	ldrb	r3, [r3, #28]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d108      	bne.n	800227e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0208 	orr.w	r2, r2, #8
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e007      	b.n	800228e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7f5b      	ldrb	r3, [r3, #29]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d108      	bne.n	80022a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0204 	orr.w	r2, r2, #4
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e007      	b.n	80022b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	ea42 0103 	orr.w	r1, r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d003      	beq.n	800231e <HAL_CAN_ConfigFilter+0x26>
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b02      	cmp	r3, #2
 800231a:	f040 80be 	bne.w	800249a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800231e:	4b65      	ldr	r3, [pc, #404]	@ (80024b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002320:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002338:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	431a      	orrs	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2201      	movs	r2, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43db      	mvns	r3, r3
 8002370:	401a      	ands	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d123      	bne.n	80023c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3248      	adds	r2, #72	@ 0x48
 80023a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023be:	6979      	ldr	r1, [r7, #20]
 80023c0:	3348      	adds	r3, #72	@ 0x48
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d122      	bne.n	8002416 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	431a      	orrs	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3248      	adds	r2, #72	@ 0x48
 80023f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800240a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800240c:	6979      	ldr	r1, [r7, #20]
 800240e:	3348      	adds	r3, #72	@ 0x48
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43db      	mvns	r3, r3
 8002428:	401a      	ands	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002430:	e007      	b.n	8002442 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	431a      	orrs	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800245c:	e007      	b.n	800246e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800248c:	f023 0201 	bic.w	r2, r3, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e006      	b.n	80024a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40006400 	.word	0x40006400

080024b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d12e      	bne.n	800252a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024e4:	f7ff f9dc 	bl	80018a0 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ea:	e012      	b.n	8002512 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ec:	f7ff f9d8 	bl	80018a0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b0a      	cmp	r3, #10
 80024f8:	d90b      	bls.n	8002512 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2205      	movs	r2, #5
 800250a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e012      	b.n	8002538 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e5      	bne.n	80024ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e006      	b.n	8002538 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	@ 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002554:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800255e:	7ffb      	ldrb	r3, [r7, #31]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d003      	beq.n	800256c <HAL_CAN_AddTxMessage+0x2c>
 8002564:	7ffb      	ldrb	r3, [r7, #31]
 8002566:	2b02      	cmp	r3, #2
 8002568:	f040 80ad 	bne.w	80026c6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8095 	beq.w	80026b6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	0e1b      	lsrs	r3, r3, #24
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002596:	2201      	movs	r2, #1
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10d      	bne.n	80025c4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	6809      	ldr	r1, [r1, #0]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3318      	adds	r3, #24
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	440b      	add	r3, r1
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e00f      	b.n	80025e4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025d8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3318      	adds	r3, #24
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	440b      	add	r3, r1
 80025e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3318      	adds	r3, #24
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	440b      	add	r3, r1
 80025f4:	3304      	adds	r3, #4
 80025f6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	7d1b      	ldrb	r3, [r3, #20]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d111      	bne.n	8002624 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3318      	adds	r3, #24
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	4413      	add	r3, r2
 800260c:	3304      	adds	r3, #4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	6811      	ldr	r1, [r2, #0]
 8002614:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3318      	adds	r3, #24
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	440b      	add	r3, r1
 8002620:	3304      	adds	r3, #4
 8002622:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3307      	adds	r3, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	061a      	lsls	r2, r3, #24
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3306      	adds	r3, #6
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3305      	adds	r3, #5
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	4313      	orrs	r3, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	3204      	adds	r2, #4
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	4610      	mov	r0, r2
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	6811      	ldr	r1, [r2, #0]
 800264c:	ea43 0200 	orr.w	r2, r3, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	440b      	add	r3, r1
 8002656:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800265a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3303      	adds	r3, #3
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	061a      	lsls	r2, r3, #24
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3302      	adds	r3, #2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3301      	adds	r3, #1
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	4313      	orrs	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	4610      	mov	r0, r2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	6811      	ldr	r1, [r2, #0]
 8002682:	ea43 0200 	orr.w	r2, r3, r0
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	440b      	add	r3, r1
 800268c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002690:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3318      	adds	r3, #24
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	6811      	ldr	r1, [r2, #0]
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3318      	adds	r3, #24
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	440b      	add	r3, r1
 80026b0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e00e      	b.n	80026d4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e006      	b.n	80026d4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3724      	adds	r7, #36	@ 0x24
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d003      	beq.n	8002704 <HAL_CAN_GetRxMessage+0x24>
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	f040 8103 	bne.w	800290a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10e      	bne.n	8002728 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d116      	bne.n	8002746 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0f7      	b.n	8002918 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0e8      	b.n	8002918 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	331b      	adds	r3, #27
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	4413      	add	r3, r2
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0204 	and.w	r2, r3, #4
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10c      	bne.n	800277e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	331b      	adds	r3, #27
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	4413      	add	r3, r2
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0d5b      	lsrs	r3, r3, #21
 8002774:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e00b      	b.n	8002796 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	331b      	adds	r3, #27
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	4413      	add	r3, r2
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	08db      	lsrs	r3, r3, #3
 800278e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	331b      	adds	r3, #27
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	4413      	add	r3, r2
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0202 	and.w	r2, r3, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	331b      	adds	r3, #27
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2208      	movs	r2, #8
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	e00b      	b.n	80027e4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	331b      	adds	r3, #27
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	4413      	add	r3, r2
 80027d8:	3304      	adds	r3, #4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 020f 	and.w	r2, r3, #15
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	331b      	adds	r3, #27
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	331b      	adds	r3, #27
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	4413      	add	r3, r2
 8002808:	3304      	adds	r3, #4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	b29a      	uxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	4413      	add	r3, r2
 800281e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4413      	add	r3, r2
 8002834:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0a1a      	lsrs	r2, r3, #8
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	4413      	add	r3, r2
 800284e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0c1a      	lsrs	r2, r3, #16
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	3302      	adds	r3, #2
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0e1a      	lsrs	r2, r3, #24
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	3303      	adds	r3, #3
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	3304      	adds	r3, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	4413      	add	r3, r2
 800289a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0a1a      	lsrs	r2, r3, #8
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	3305      	adds	r3, #5
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	0c1a      	lsrs	r2, r3, #16
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	3306      	adds	r3, #6
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0e1a      	lsrs	r2, r3, #24
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3307      	adds	r3, #7
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d108      	bne.n	80028f6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0220 	orr.w	r2, r2, #32
 80028f2:	60da      	str	r2, [r3, #12]
 80028f4:	e007      	b.n	8002906 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0220 	orr.w	r2, r2, #32
 8002904:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e006      	b.n	8002918 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	@ 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d07c      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d023      	beq.n	80029bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f983 	bl	8002c92 <HAL_CAN_TxMailbox0CompleteCallback>
 800298c:	e016      	b.n	80029bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a0:	e00c      	b.n	80029bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029b4:	e002      	b.n	80029bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f989 	bl	8002cce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d024      	beq.n	8002a10 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f963 	bl	8002ca6 <HAL_CAN_TxMailbox1CompleteCallback>
 80029e0:	e016      	b.n	8002a10 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d004      	beq.n	80029f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f4:	e00c      	b.n	8002a10 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a08:	e002      	b.n	8002a10 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f969 	bl	8002ce2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d024      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f943 	bl	8002cba <HAL_CAN_TxMailbox2CompleteCallback>
 8002a34:	e016      	b.n	8002a64 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a48:	e00c      	b.n	8002a64 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5c:	e002      	b.n	8002a64 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f949 	bl	8002cf6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2210      	movs	r2, #16
 8002a86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d006      	beq.n	8002aaa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f930 	bl	8002d0a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe f90e 	bl	8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2210      	movs	r2, #16
 8002aea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2208      	movs	r2, #8
 8002b06:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f912 	bl	8002d32 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8f9 	bl	8002d1e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2210      	movs	r2, #16
 8002b46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f8fc 	bl	8002d46 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2208      	movs	r2, #8
 8002b68:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f8f5 	bl	8002d5a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d07b      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d072      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d043      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d03e      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bf2:	2b60      	cmp	r3, #96	@ 0x60
 8002bf4:	d02b      	beq.n	8002c4e <HAL_CAN_IRQHandler+0x32a>
 8002bf6:	2b60      	cmp	r3, #96	@ 0x60
 8002bf8:	d82e      	bhi.n	8002c58 <HAL_CAN_IRQHandler+0x334>
 8002bfa:	2b50      	cmp	r3, #80	@ 0x50
 8002bfc:	d022      	beq.n	8002c44 <HAL_CAN_IRQHandler+0x320>
 8002bfe:	2b50      	cmp	r3, #80	@ 0x50
 8002c00:	d82a      	bhi.n	8002c58 <HAL_CAN_IRQHandler+0x334>
 8002c02:	2b40      	cmp	r3, #64	@ 0x40
 8002c04:	d019      	beq.n	8002c3a <HAL_CAN_IRQHandler+0x316>
 8002c06:	2b40      	cmp	r3, #64	@ 0x40
 8002c08:	d826      	bhi.n	8002c58 <HAL_CAN_IRQHandler+0x334>
 8002c0a:	2b30      	cmp	r3, #48	@ 0x30
 8002c0c:	d010      	beq.n	8002c30 <HAL_CAN_IRQHandler+0x30c>
 8002c0e:	2b30      	cmp	r3, #48	@ 0x30
 8002c10:	d822      	bhi.n	8002c58 <HAL_CAN_IRQHandler+0x334>
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d002      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x2f8>
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d005      	beq.n	8002c26 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c1a:	e01d      	b.n	8002c58 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	f043 0308 	orr.w	r3, r3, #8
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c24:	e019      	b.n	8002c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	f043 0310 	orr.w	r3, r3, #16
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c2e:	e014      	b.n	8002c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	f043 0320 	orr.w	r3, r3, #32
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c38:	e00f      	b.n	8002c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c42:	e00a      	b.n	8002c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c4c:	e005      	b.n	8002c5a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c56:	e000      	b.n	8002c5a <HAL_CAN_IRQHandler+0x336>
            break;
 8002c58:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002c68:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f872 	bl	8002d6e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3728      	adds	r7, #40	@ 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d94:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db6:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60d3      	str	r3, [r2, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd0:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 0307 	and.w	r3, r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4907      	ldr	r1, [pc, #28]	@ (8002e20 <__NVIC_EnableIRQ+0x38>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100

08002e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	db0a      	blt.n	8002e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	490c      	ldr	r1, [pc, #48]	@ (8002e70 <__NVIC_SetPriority+0x4c>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	440b      	add	r3, r1
 8002e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e4c:	e00a      	b.n	8002e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4908      	ldr	r1, [pc, #32]	@ (8002e74 <__NVIC_SetPriority+0x50>)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	440b      	add	r3, r1
 8002e62:	761a      	strb	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000e100 	.word	0xe000e100
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	@ 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f1c3 0307 	rsb	r3, r3, #7
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf28      	it	cs
 8002e96:	2304      	movcs	r3, #4
 8002e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d902      	bls.n	8002ea8 <NVIC_EncodePriority+0x30>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3b03      	subs	r3, #3
 8002ea6:	e000      	b.n	8002eaa <NVIC_EncodePriority+0x32>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	401a      	ands	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	43d9      	mvns	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	4313      	orrs	r3, r2
         );
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef0:	d301      	bcc.n	8002ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <SysTick_Config+0x40>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efe:	210f      	movs	r1, #15
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f04:	f7ff ff8e 	bl	8002e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <SysTick_Config+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <SysTick_Config+0x40>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff29 	bl	8002d84 <__NVIC_SetPriorityGrouping>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4c:	f7ff ff3e 	bl	8002dcc <__NVIC_GetPriorityGrouping>
 8002f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f7ff ff8e 	bl	8002e78 <NVIC_EncodePriority>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff5d 	bl	8002e24 <__NVIC_SetPriority>
}
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff31 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffa2 	bl	8002ee0 <SysTick_Config>
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e16b      	b.n	800329c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 815a 	bne.w	8003296 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d005      	beq.n	8002ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d130      	bne.n	800305c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	2203      	movs	r2, #3
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 0201 	and.w	r2, r3, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b03      	cmp	r3, #3
 8003066:	d017      	beq.n	8003098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d123      	bne.n	80030ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	08da      	lsrs	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3208      	adds	r2, #8
 80030ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80b4 	beq.w	8003296 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b60      	ldr	r3, [pc, #384]	@ (80032b4 <HAL_GPIO_Init+0x30c>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	4a5f      	ldr	r2, [pc, #380]	@ (80032b4 <HAL_GPIO_Init+0x30c>)
 8003138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800313c:	6453      	str	r3, [r2, #68]	@ 0x44
 800313e:	4b5d      	ldr	r3, [pc, #372]	@ (80032b4 <HAL_GPIO_Init+0x30c>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800314a:	4a5b      	ldr	r2, [pc, #364]	@ (80032b8 <HAL_GPIO_Init+0x310>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a52      	ldr	r2, [pc, #328]	@ (80032bc <HAL_GPIO_Init+0x314>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02b      	beq.n	80031ce <HAL_GPIO_Init+0x226>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a51      	ldr	r2, [pc, #324]	@ (80032c0 <HAL_GPIO_Init+0x318>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d025      	beq.n	80031ca <HAL_GPIO_Init+0x222>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a50      	ldr	r2, [pc, #320]	@ (80032c4 <HAL_GPIO_Init+0x31c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d01f      	beq.n	80031c6 <HAL_GPIO_Init+0x21e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4f      	ldr	r2, [pc, #316]	@ (80032c8 <HAL_GPIO_Init+0x320>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d019      	beq.n	80031c2 <HAL_GPIO_Init+0x21a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4e      	ldr	r2, [pc, #312]	@ (80032cc <HAL_GPIO_Init+0x324>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_GPIO_Init+0x216>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4d      	ldr	r2, [pc, #308]	@ (80032d0 <HAL_GPIO_Init+0x328>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00d      	beq.n	80031ba <HAL_GPIO_Init+0x212>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4c      	ldr	r2, [pc, #304]	@ (80032d4 <HAL_GPIO_Init+0x32c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <HAL_GPIO_Init+0x20e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4b      	ldr	r2, [pc, #300]	@ (80032d8 <HAL_GPIO_Init+0x330>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d101      	bne.n	80031b2 <HAL_GPIO_Init+0x20a>
 80031ae:	2307      	movs	r3, #7
 80031b0:	e00e      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031b2:	2308      	movs	r3, #8
 80031b4:	e00c      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031b6:	2306      	movs	r3, #6
 80031b8:	e00a      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e008      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031be:	2304      	movs	r3, #4
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e004      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x228>
 80031ce:	2300      	movs	r3, #0
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f002 0203 	and.w	r2, r2, #3
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	4093      	lsls	r3, r2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e0:	4935      	ldr	r1, [pc, #212]	@ (80032b8 <HAL_GPIO_Init+0x310>)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ee:	4b3b      	ldr	r3, [pc, #236]	@ (80032dc <HAL_GPIO_Init+0x334>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003212:	4a32      	ldr	r2, [pc, #200]	@ (80032dc <HAL_GPIO_Init+0x334>)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003218:	4b30      	ldr	r3, [pc, #192]	@ (80032dc <HAL_GPIO_Init+0x334>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800323c:	4a27      	ldr	r2, [pc, #156]	@ (80032dc <HAL_GPIO_Init+0x334>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003242:	4b26      	ldr	r3, [pc, #152]	@ (80032dc <HAL_GPIO_Init+0x334>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003266:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <HAL_GPIO_Init+0x334>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326c:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <HAL_GPIO_Init+0x334>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003290:	4a12      	ldr	r2, [pc, #72]	@ (80032dc <HAL_GPIO_Init+0x334>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3301      	adds	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	f67f ae90 	bls.w	8002fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3724      	adds	r7, #36	@ 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40020800 	.word	0x40020800
 80032c8:	40020c00 	.word	0x40020c00
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40021400 	.word	0x40021400
 80032d4:	40021800 	.word	0x40021800
 80032d8:	40021c00 	.word	0x40021c00
 80032dc:	40013c00 	.word	0x40013c00

080032e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
 80032ec:	4613      	mov	r3, r2
 80032ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f0:	787b      	ldrb	r3, [r7, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	619a      	str	r2, [r3, #24]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003324:	887a      	ldrh	r2, [r7, #2]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4013      	ands	r3, r2
 800332a:	041a      	lsls	r2, r3, #16
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	43d9      	mvns	r1, r3
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	400b      	ands	r3, r1
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e267      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d075      	beq.n	8003452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003366:	4b88      	ldr	r3, [pc, #544]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00c      	beq.n	800338c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003372:	4b85      	ldr	r3, [pc, #532]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800337a:	2b08      	cmp	r3, #8
 800337c:	d112      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b82      	ldr	r3, [pc, #520]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	4b7e      	ldr	r3, [pc, #504]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05b      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d157      	bne.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e242      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x74>
 80033ae:	4b76      	ldr	r3, [pc, #472]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b70      	ldr	r3, [pc, #448]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033e0:	4b69      	ldr	r3, [pc, #420]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a68      	ldr	r2, [pc, #416]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b66      	ldr	r3, [pc, #408]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a65      	ldr	r2, [pc, #404]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe fa4e 	bl	80018a0 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe fa4a 	bl	80018a0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e207      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b5b      	ldr	r3, [pc, #364]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0xc0>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe fa3a 	bl	80018a0 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fa36 	bl	80018a0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1f3      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	4b51      	ldr	r3, [pc, #324]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0xe8>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d063      	beq.n	8003526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800345e:	4b4a      	ldr	r3, [pc, #296]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003472:	2b08      	cmp	r3, #8
 8003474:	d11c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b44      	ldr	r3, [pc, #272]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	4b41      	ldr	r3, [pc, #260]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1c7      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349a:	4b3b      	ldr	r3, [pc, #236]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4937      	ldr	r1, [pc, #220]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	e03a      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b8:	4b34      	ldr	r3, [pc, #208]	@ (800358c <HAL_RCC_OscConfig+0x244>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe f9ef 	bl	80018a0 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe f9eb 	bl	80018a0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1a8      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b28      	ldr	r3, [pc, #160]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4925      	ldr	r1, [pc, #148]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b24      	ldr	r3, [pc, #144]	@ (800358c <HAL_RCC_OscConfig+0x244>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe f9ce 	bl	80018a0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe f9ca 	bl	80018a0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e187      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d036      	beq.n	80035a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <HAL_RCC_OscConfig+0x248>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe f9ae 	bl	80018a0 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe f9aa 	bl	80018a0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e167      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x200>
 8003566:	e01b      	b.n	80035a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003568:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <HAL_RCC_OscConfig+0x248>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fe f997 	bl	80018a0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e00e      	b.n	8003594 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7fe f993 	bl	80018a0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d907      	bls.n	8003594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e150      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
 8003588:	40023800 	.word	0x40023800
 800358c:	42470000 	.word	0x42470000
 8003590:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	4b88      	ldr	r3, [pc, #544]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ea      	bne.n	8003576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8097 	beq.w	80036dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b81      	ldr	r3, [pc, #516]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	4b7d      	ldr	r3, [pc, #500]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	4a7c      	ldr	r2, [pc, #496]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ce:	4b7a      	ldr	r3, [pc, #488]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b77      	ldr	r3, [pc, #476]	@ (80037bc <HAL_RCC_OscConfig+0x474>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b74      	ldr	r3, [pc, #464]	@ (80037bc <HAL_RCC_OscConfig+0x474>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a73      	ldr	r2, [pc, #460]	@ (80037bc <HAL_RCC_OscConfig+0x474>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7fe f953 	bl	80018a0 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fe f94f 	bl	80018a0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e10c      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b6a      	ldr	r3, [pc, #424]	@ (80037bc <HAL_RCC_OscConfig+0x474>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x2ea>
 8003624:	4b64      	ldr	r3, [pc, #400]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003628:	4a63      	ldr	r2, [pc, #396]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003630:	e01c      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b05      	cmp	r3, #5
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x30c>
 800363a:	4b5f      	ldr	r3, [pc, #380]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363e:	4a5e      	ldr	r2, [pc, #376]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6713      	str	r3, [r2, #112]	@ 0x70
 8003646:	4b5c      	ldr	r3, [pc, #368]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	4a5b      	ldr	r2, [pc, #364]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	@ 0x70
 8003652:	e00b      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003654:	4b58      	ldr	r3, [pc, #352]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003658:	4a57      	ldr	r2, [pc, #348]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003660:	4b55      	ldr	r3, [pc, #340]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	4a54      	ldr	r2, [pc, #336]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d015      	beq.n	80036a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7fe f914 	bl	80018a0 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fe f910 	bl	80018a0 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e0cb      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	4b49      	ldr	r3, [pc, #292]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0ee      	beq.n	800367c <HAL_RCC_OscConfig+0x334>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fe f8fe 	bl	80018a0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe f8fa 	bl	80018a0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0b5      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036be:	4b3e      	ldr	r3, [pc, #248]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ee      	bne.n	80036a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d105      	bne.n	80036dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d0:	4b39      	ldr	r3, [pc, #228]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	4a38      	ldr	r2, [pc, #224]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80a1 	beq.w	8003828 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e6:	4b34      	ldr	r3, [pc, #208]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d05c      	beq.n	80037ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d141      	bne.n	800377e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe f8ce 	bl	80018a0 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe f8ca 	bl	80018a0 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e087      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b27      	ldr	r3, [pc, #156]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	491b      	ldr	r1, [pc, #108]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe f8a3 	bl	80018a0 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7fe f89f 	bl	80018a0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e05c      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003770:	4b11      	ldr	r3, [pc, #68]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x416>
 800377c:	e054      	b.n	8003828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe f88c 	bl	80018a0 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe f888 	bl	80018a0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e045      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x444>
 80037aa:	e03d      	b.n	8003828 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e038      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000
 80037c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003834 <HAL_RCC_OscConfig+0x4ec>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d028      	beq.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d121      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d11a      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	3b01      	subs	r3, #1
 800380e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800

08003838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cc      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b68      	ldr	r3, [pc, #416]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d90c      	bls.n	8003874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b65      	ldr	r3, [pc, #404]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b63      	ldr	r3, [pc, #396]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0b8      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800388c:	4b59      	ldr	r3, [pc, #356]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a58      	ldr	r2, [pc, #352]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003896:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a4:	4b53      	ldr	r3, [pc, #332]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a52      	ldr	r2, [pc, #328]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b50      	ldr	r3, [pc, #320]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	494d      	ldr	r1, [pc, #308]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d044      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	4b47      	ldr	r3, [pc, #284]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d119      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e07f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b3f      	ldr	r3, [pc, #252]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e067      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b37      	ldr	r3, [pc, #220]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4934      	ldr	r1, [pc, #208]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd ffba 	bl	80018a0 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd ffb6 	bl	80018a0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e04f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2b      	ldr	r3, [pc, #172]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b25      	ldr	r3, [pc, #148]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d20c      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b22      	ldr	r3, [pc, #136]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b20      	ldr	r3, [pc, #128]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e032      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4916      	ldr	r1, [pc, #88]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039aa:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	490e      	ldr	r1, [pc, #56]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039be:	f000 f821 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	490a      	ldr	r1, [pc, #40]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	4a09      	ldr	r2, [pc, #36]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039da:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd ff1a 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08005ad8 	.word	0x08005ad8
 80039fc:	20000000 	.word	0x20000000
 8003a00:	20000004 	.word	0x20000004

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a08:	b094      	sub	sp, #80	@ 0x50
 8003a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a1c:	4b79      	ldr	r3, [pc, #484]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d00d      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x40>
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	f200 80e1 	bhi.w	8003bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x34>
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a36:	e0db      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b73      	ldr	r3, [pc, #460]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a3c:	e0db      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3e:	4b73      	ldr	r3, [pc, #460]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a42:	e0d8      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a44:	4b6f      	ldr	r3, [pc, #444]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	2200      	movs	r2, #0
 8003a62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a6e:	2300      	movs	r3, #0
 8003a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a76:	4622      	mov	r2, r4
 8003a78:	462b      	mov	r3, r5
 8003a7a:	f04f 0000 	mov.w	r0, #0
 8003a7e:	f04f 0100 	mov.w	r1, #0
 8003a82:	0159      	lsls	r1, r3, #5
 8003a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a88:	0150      	lsls	r0, r2, #5
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4621      	mov	r1, r4
 8003a90:	1a51      	subs	r1, r2, r1
 8003a92:	6139      	str	r1, [r7, #16]
 8003a94:	4629      	mov	r1, r5
 8003a96:	eb63 0301 	sbc.w	r3, r3, r1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	018b      	lsls	r3, r1, #6
 8003aac:	4651      	mov	r1, sl
 8003aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	018a      	lsls	r2, r1, #6
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	ebb2 0801 	subs.w	r8, r2, r1
 8003abc:	4659      	mov	r1, fp
 8003abe:	eb63 0901 	sbc.w	r9, r3, r1
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ad6:	4690      	mov	r8, r2
 8003ad8:	4699      	mov	r9, r3
 8003ada:	4623      	mov	r3, r4
 8003adc:	eb18 0303 	adds.w	r3, r8, r3
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	462b      	mov	r3, r5
 8003ae4:	eb49 0303 	adc.w	r3, r9, r3
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003af6:	4629      	mov	r1, r5
 8003af8:	024b      	lsls	r3, r1, #9
 8003afa:	4621      	mov	r1, r4
 8003afc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b00:	4621      	mov	r1, r4
 8003b02:	024a      	lsls	r2, r1, #9
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b14:	f7fc feb2 	bl	800087c <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b20:	e058      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b22:	4b38      	ldr	r3, [pc, #224]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b32:	623b      	str	r3, [r7, #32]
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	f04f 0000 	mov.w	r0, #0
 8003b44:	f04f 0100 	mov.w	r1, #0
 8003b48:	0159      	lsls	r1, r3, #5
 8003b4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b4e:	0150      	lsls	r0, r2, #5
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4641      	mov	r1, r8
 8003b56:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b74:	ebb2 040a 	subs.w	r4, r2, sl
 8003b78:	eb63 050b 	sbc.w	r5, r3, fp
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	00eb      	lsls	r3, r5, #3
 8003b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b8a:	00e2      	lsls	r2, r4, #3
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	4643      	mov	r3, r8
 8003b92:	18e3      	adds	r3, r4, r3
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	464b      	mov	r3, r9
 8003b98:	eb45 0303 	adc.w	r3, r5, r3
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003baa:	4629      	mov	r1, r5
 8003bac:	028b      	lsls	r3, r1, #10
 8003bae:	4621      	mov	r1, r4
 8003bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	028a      	lsls	r2, r1, #10
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	61fa      	str	r2, [r7, #28]
 8003bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc8:	f7fc fe58 	bl	800087c <__aeabi_uldivmod>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	3301      	adds	r3, #1
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003be4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bee:	e002      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3750      	adds	r7, #80	@ 0x50
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	007a1200 	.word	0x007a1200

08003c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c14:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000000 	.word	0x20000000

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c2c:	f7ff fff0 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0a9b      	lsrs	r3, r3, #10
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4903      	ldr	r1, [pc, #12]	@ (8003c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	08005ae8 	.word	0x08005ae8

08003c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c54:	f7ff ffdc 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0b5b      	lsrs	r3, r3, #13
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	@ (8003c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	08005ae8 	.word	0x08005ae8

08003c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e041      	b.n	8003d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd fc4a 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 fb46 	bl	8004348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e041      	b.n	8003dac <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f839 	bl	8003db4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f000 faf7 	bl	8004348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d020      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01b      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0202 	mvn.w	r2, #2
 8003dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fc fecc 	bl	8000bb0 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa76 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa7d 	bl	8004320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d020      	beq.n	8003e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01b      	beq.n	8003e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0204 	mvn.w	r2, #4
 8003e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fc fea6 	bl	8000bb0 <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa50 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa57 	bl	8004320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d020      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01b      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0208 	mvn.w	r2, #8
 8003e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2204      	movs	r2, #4
 8003e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fc fe80 	bl	8000bb0 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa2a 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa31 	bl	8004320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d020      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0210 	mvn.w	r2, #16
 8003ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fc fe5a 	bl	8000bb0 <HAL_TIM_IC_CaptureCallback>
 8003efc:	e005      	b.n	8003f0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa04 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa0b 	bl	8004320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00c      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0201 	mvn.w	r2, #1
 8003f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f9e2 	bl	80042f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fcee 	bl	8004934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f9dc 	bl	8004334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00c      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0220 	mvn.w	r2, #32
 8003f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fcc0 	bl	8004920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e088      	b.n	80040d8 <HAL_TIM_IC_ConfigChannel+0x130>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d11b      	bne.n	800400c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003fe4:	f000 fa5c 	bl	80044a0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 020c 	bic.w	r2, r2, #12
 8003ff6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6999      	ldr	r1, [r3, #24]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	619a      	str	r2, [r3, #24]
 800400a:	e060      	b.n	80040ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d11c      	bne.n	800404c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004022:	f000 fae0 	bl	80045e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004034:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6999      	ldr	r1, [r3, #24]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	021a      	lsls	r2, r3, #8
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	619a      	str	r2, [r3, #24]
 800404a:	e040      	b.n	80040ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b08      	cmp	r3, #8
 8004050:	d11b      	bne.n	800408a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004062:	f000 fb2d 	bl	80046c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 020c 	bic.w	r2, r2, #12
 8004074:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	61da      	str	r2, [r3, #28]
 8004088:	e021      	b.n	80040ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d11c      	bne.n	80040ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80040a0:	f000 fb4a 	bl	8004738 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80040b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69d9      	ldr	r1, [r3, #28]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	61da      	str	r2, [r3, #28]
 80040c8:	e001      	b.n	80040ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIM_ConfigClockSource+0x1c>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e0b4      	b.n	8004266 <HAL_TIM_ConfigClockSource+0x186>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800411a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004134:	d03e      	beq.n	80041b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413a:	f200 8087 	bhi.w	800424c <HAL_TIM_ConfigClockSource+0x16c>
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004142:	f000 8086 	beq.w	8004252 <HAL_TIM_ConfigClockSource+0x172>
 8004146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414a:	d87f      	bhi.n	800424c <HAL_TIM_ConfigClockSource+0x16c>
 800414c:	2b70      	cmp	r3, #112	@ 0x70
 800414e:	d01a      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0xa6>
 8004150:	2b70      	cmp	r3, #112	@ 0x70
 8004152:	d87b      	bhi.n	800424c <HAL_TIM_ConfigClockSource+0x16c>
 8004154:	2b60      	cmp	r3, #96	@ 0x60
 8004156:	d050      	beq.n	80041fa <HAL_TIM_ConfigClockSource+0x11a>
 8004158:	2b60      	cmp	r3, #96	@ 0x60
 800415a:	d877      	bhi.n	800424c <HAL_TIM_ConfigClockSource+0x16c>
 800415c:	2b50      	cmp	r3, #80	@ 0x50
 800415e:	d03c      	beq.n	80041da <HAL_TIM_ConfigClockSource+0xfa>
 8004160:	2b50      	cmp	r3, #80	@ 0x50
 8004162:	d873      	bhi.n	800424c <HAL_TIM_ConfigClockSource+0x16c>
 8004164:	2b40      	cmp	r3, #64	@ 0x40
 8004166:	d058      	beq.n	800421a <HAL_TIM_ConfigClockSource+0x13a>
 8004168:	2b40      	cmp	r3, #64	@ 0x40
 800416a:	d86f      	bhi.n	800424c <HAL_TIM_ConfigClockSource+0x16c>
 800416c:	2b30      	cmp	r3, #48	@ 0x30
 800416e:	d064      	beq.n	800423a <HAL_TIM_ConfigClockSource+0x15a>
 8004170:	2b30      	cmp	r3, #48	@ 0x30
 8004172:	d86b      	bhi.n	800424c <HAL_TIM_ConfigClockSource+0x16c>
 8004174:	2b20      	cmp	r3, #32
 8004176:	d060      	beq.n	800423a <HAL_TIM_ConfigClockSource+0x15a>
 8004178:	2b20      	cmp	r3, #32
 800417a:	d867      	bhi.n	800424c <HAL_TIM_ConfigClockSource+0x16c>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d05c      	beq.n	800423a <HAL_TIM_ConfigClockSource+0x15a>
 8004180:	2b10      	cmp	r3, #16
 8004182:	d05a      	beq.n	800423a <HAL_TIM_ConfigClockSource+0x15a>
 8004184:	e062      	b.n	800424c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004196:	f000 fb27 	bl	80047e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	609a      	str	r2, [r3, #8]
      break;
 80041b2:	e04f      	b.n	8004254 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041c4:	f000 fb10 	bl	80047e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041d6:	609a      	str	r2, [r3, #8]
      break;
 80041d8:	e03c      	b.n	8004254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e6:	461a      	mov	r2, r3
 80041e8:	f000 f9ce 	bl	8004588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2150      	movs	r1, #80	@ 0x50
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fadd 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 80041f8:	e02c      	b.n	8004254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004206:	461a      	mov	r2, r3
 8004208:	f000 fa2a 	bl	8004660 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2160      	movs	r1, #96	@ 0x60
 8004212:	4618      	mov	r0, r3
 8004214:	f000 facd 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 8004218:	e01c      	b.n	8004254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004226:	461a      	mov	r2, r3
 8004228:	f000 f9ae 	bl	8004588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2140      	movs	r1, #64	@ 0x40
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fabd 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 8004238:	e00c      	b.n	8004254 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f000 fab4 	bl	80047b2 <TIM_ITRx_SetConfig>
      break;
 800424a:	e003      	b.n	8004254 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	73fb      	strb	r3, [r7, #15]
      break;
 8004250:	e000      	b.n	8004254 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b0c      	cmp	r3, #12
 8004282:	d831      	bhi.n	80042e8 <HAL_TIM_ReadCapturedValue+0x78>
 8004284:	a201      	add	r2, pc, #4	@ (adr r2, 800428c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042c1 	.word	0x080042c1
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042e9 	.word	0x080042e9
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080042cb 	.word	0x080042cb
 80042a0:	080042e9 	.word	0x080042e9
 80042a4:	080042e9 	.word	0x080042e9
 80042a8:	080042e9 	.word	0x080042e9
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042e9 	.word	0x080042e9
 80042b4:	080042e9 	.word	0x080042e9
 80042b8:	080042e9 	.word	0x080042e9
 80042bc:	080042df 	.word	0x080042df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c6:	60fb      	str	r3, [r7, #12]

      break;
 80042c8:	e00f      	b.n	80042ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	60fb      	str	r3, [r7, #12]

      break;
 80042d2:	e00a      	b.n	80042ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042da:	60fb      	str	r3, [r7, #12]

      break;
 80042dc:	e005      	b.n	80042ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	60fb      	str	r3, [r7, #12]

      break;
 80042e6:	e000      	b.n	80042ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80042e8:	bf00      	nop
  }

  return tmpreg;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a46      	ldr	r2, [pc, #280]	@ (8004474 <TIM_Base_SetConfig+0x12c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004366:	d00f      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a43      	ldr	r2, [pc, #268]	@ (8004478 <TIM_Base_SetConfig+0x130>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a42      	ldr	r2, [pc, #264]	@ (800447c <TIM_Base_SetConfig+0x134>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a41      	ldr	r2, [pc, #260]	@ (8004480 <TIM_Base_SetConfig+0x138>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a40      	ldr	r2, [pc, #256]	@ (8004484 <TIM_Base_SetConfig+0x13c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d108      	bne.n	800439a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a35      	ldr	r2, [pc, #212]	@ (8004474 <TIM_Base_SetConfig+0x12c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d02b      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a8:	d027      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a32      	ldr	r2, [pc, #200]	@ (8004478 <TIM_Base_SetConfig+0x130>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d023      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a31      	ldr	r2, [pc, #196]	@ (800447c <TIM_Base_SetConfig+0x134>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01f      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <TIM_Base_SetConfig+0x138>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01b      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004484 <TIM_Base_SetConfig+0x13c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d017      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004488 <TIM_Base_SetConfig+0x140>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a2d      	ldr	r2, [pc, #180]	@ (800448c <TIM_Base_SetConfig+0x144>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00f      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004490 <TIM_Base_SetConfig+0x148>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00b      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004494 <TIM_Base_SetConfig+0x14c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004498 <TIM_Base_SetConfig+0x150>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d003      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a29      	ldr	r2, [pc, #164]	@ (800449c <TIM_Base_SetConfig+0x154>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d108      	bne.n	800440c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a10      	ldr	r2, [pc, #64]	@ (8004474 <TIM_Base_SetConfig+0x12c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d003      	beq.n	8004440 <TIM_Base_SetConfig+0xf8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a12      	ldr	r2, [pc, #72]	@ (8004484 <TIM_Base_SetConfig+0x13c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d103      	bne.n	8004448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d105      	bne.n	8004466 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f023 0201 	bic.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	611a      	str	r2, [r3, #16]
  }
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40010000 	.word	0x40010000
 8004478:	40000400 	.word	0x40000400
 800447c:	40000800 	.word	0x40000800
 8004480:	40000c00 	.word	0x40000c00
 8004484:	40010400 	.word	0x40010400
 8004488:	40014000 	.word	0x40014000
 800448c:	40014400 	.word	0x40014400
 8004490:	40014800 	.word	0x40014800
 8004494:	40001800 	.word	0x40001800
 8004498:	40001c00 	.word	0x40001c00
 800449c:	40002000 	.word	0x40002000

080044a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f023 0201 	bic.w	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a28      	ldr	r2, [pc, #160]	@ (800456c <TIM_TI1_SetConfig+0xcc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01b      	beq.n	8004506 <TIM_TI1_SetConfig+0x66>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d4:	d017      	beq.n	8004506 <TIM_TI1_SetConfig+0x66>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a25      	ldr	r2, [pc, #148]	@ (8004570 <TIM_TI1_SetConfig+0xd0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <TIM_TI1_SetConfig+0x66>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a24      	ldr	r2, [pc, #144]	@ (8004574 <TIM_TI1_SetConfig+0xd4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00f      	beq.n	8004506 <TIM_TI1_SetConfig+0x66>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a23      	ldr	r2, [pc, #140]	@ (8004578 <TIM_TI1_SetConfig+0xd8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00b      	beq.n	8004506 <TIM_TI1_SetConfig+0x66>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a22      	ldr	r2, [pc, #136]	@ (800457c <TIM_TI1_SetConfig+0xdc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d007      	beq.n	8004506 <TIM_TI1_SetConfig+0x66>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a21      	ldr	r2, [pc, #132]	@ (8004580 <TIM_TI1_SetConfig+0xe0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <TIM_TI1_SetConfig+0x66>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a20      	ldr	r2, [pc, #128]	@ (8004584 <TIM_TI1_SetConfig+0xe4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <TIM_TI1_SetConfig+0x6a>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <TIM_TI1_SetConfig+0x6c>
 800450a:	2300      	movs	r3, #0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e003      	b.n	800452a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	b2db      	uxtb	r3, r3
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f023 030a 	bic.w	r3, r3, #10
 8004544:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f003 030a 	and.w	r3, r3, #10
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40010000 	.word	0x40010000
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40010400 	.word	0x40010400
 8004580:	40014000 	.word	0x40014000
 8004584:	40001800 	.word	0x40001800

08004588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0201 	bic.w	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f023 030a 	bic.w	r3, r3, #10
 80045c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b087      	sub	sp, #28
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0210 	bic.w	r2, r3, #16
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	031b      	lsls	r3, r3, #12
 800462a:	b29b      	uxth	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004638:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f023 0210 	bic.w	r2, r3, #16
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800468a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	031b      	lsls	r3, r3, #12
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800469c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	621a      	str	r2, [r3, #32]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f023 0303 	bic.w	r3, r3, #3
 80046ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	b2db      	uxtb	r3, r3
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004710:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	621a      	str	r2, [r3, #32]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004764:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004776:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	031b      	lsls	r3, r3, #12
 800477c:	b29b      	uxth	r3, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800478a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	031b      	lsls	r3, r3, #12
 8004790:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f043 0307 	orr.w	r3, r3, #7
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	021a      	lsls	r2, r3, #8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	431a      	orrs	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800483c:	2302      	movs	r3, #2
 800483e:	e05a      	b.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a21      	ldr	r2, [pc, #132]	@ (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488c:	d01d      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1d      	ldr	r2, [pc, #116]	@ (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1b      	ldr	r2, [pc, #108]	@ (800490c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a18      	ldr	r2, [pc, #96]	@ (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a17      	ldr	r2, [pc, #92]	@ (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a15      	ldr	r2, [pc, #84]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10c      	bne.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40010000 	.word	0x40010000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40010400 	.word	0x40010400
 8004918:	40014000 	.word	0x40014000
 800491c:	40001800 	.word	0x40001800

08004920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e042      	b.n	80049e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fc fe32 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	@ 0x24
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800498a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f973 	bl	8004c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	@ 0x28
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d175      	bne.n	8004af4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_UART_Transmit+0x2c>
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e06e      	b.n	8004af6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2221      	movs	r2, #33	@ 0x21
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a26:	f7fc ff3b 	bl	80018a0 <HAL_GetTick>
 8004a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a40:	d108      	bne.n	8004a54 <HAL_UART_Transmit+0x6c>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d104      	bne.n	8004a54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	e003      	b.n	8004a5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a5c:	e02e      	b.n	8004abc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2200      	movs	r2, #0
 8004a66:	2180      	movs	r1, #128	@ 0x80
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f848 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e03a      	b.n	8004af6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	3302      	adds	r3, #2
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	e007      	b.n	8004aae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1cb      	bne.n	8004a5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2200      	movs	r2, #0
 8004ace:	2140      	movs	r1, #64	@ 0x40
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f814 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e006      	b.n	8004af6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0e:	e03b      	b.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b16:	d037      	beq.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b18:	f7fc fec2 	bl	80018a0 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	6a3a      	ldr	r2, [r7, #32]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e03a      	b.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d023      	beq.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b80      	cmp	r3, #128	@ 0x80
 8004b44:	d020      	beq.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b40      	cmp	r3, #64	@ 0x40
 8004b4a:	d01d      	beq.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d116      	bne.n	8004b88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f81d 	bl	8004bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e00f      	b.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4013      	ands	r3, r2
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d0b4      	beq.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b095      	sub	sp, #84	@ 0x54
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bd8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e5      	bne.n	8004bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3314      	adds	r3, #20
 8004c0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e5      	bne.n	8004bec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d119      	bne.n	8004c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 0310 	bic.w	r3, r3, #16
 8004c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c48:	61ba      	str	r2, [r7, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6979      	ldr	r1, [r7, #20]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	613b      	str	r3, [r7, #16]
   return(result);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e5      	bne.n	8004c28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c6a:	bf00      	nop
 8004c6c:	3754      	adds	r7, #84	@ 0x54
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c7c:	b0c0      	sub	sp, #256	@ 0x100
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c94:	68d9      	ldr	r1, [r3, #12]
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	ea40 0301 	orr.w	r3, r0, r1
 8004ca0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004cd0:	f021 010c 	bic.w	r1, r1, #12
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf2:	6999      	ldr	r1, [r3, #24]
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	ea40 0301 	orr.w	r3, r0, r1
 8004cfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b8f      	ldr	r3, [pc, #572]	@ (8004f44 <UART_SetConfig+0x2cc>)
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d005      	beq.n	8004d18 <UART_SetConfig+0xa0>
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b8d      	ldr	r3, [pc, #564]	@ (8004f48 <UART_SetConfig+0x2d0>)
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d104      	bne.n	8004d22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d18:	f7fe ff9a 	bl	8003c50 <HAL_RCC_GetPCLK2Freq>
 8004d1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d20:	e003      	b.n	8004d2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d22:	f7fe ff81 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8004d26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d34:	f040 810c 	bne.w	8004f50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	462b      	mov	r3, r5
 8004d4e:	1891      	adds	r1, r2, r2
 8004d50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d52:	415b      	adcs	r3, r3
 8004d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	eb12 0801 	adds.w	r8, r2, r1
 8004d60:	4629      	mov	r1, r5
 8004d62:	eb43 0901 	adc.w	r9, r3, r1
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d7a:	4690      	mov	r8, r2
 8004d7c:	4699      	mov	r9, r3
 8004d7e:	4623      	mov	r3, r4
 8004d80:	eb18 0303 	adds.w	r3, r8, r3
 8004d84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d88:	462b      	mov	r3, r5
 8004d8a:	eb49 0303 	adc.w	r3, r9, r3
 8004d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004da2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004da6:	460b      	mov	r3, r1
 8004da8:	18db      	adds	r3, r3, r3
 8004daa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dac:	4613      	mov	r3, r2
 8004dae:	eb42 0303 	adc.w	r3, r2, r3
 8004db2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004db4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004db8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004dbc:	f7fb fd5e 	bl	800087c <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4b61      	ldr	r3, [pc, #388]	@ (8004f4c <UART_SetConfig+0x2d4>)
 8004dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	011c      	lsls	r4, r3, #4
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ddc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004de8:	415b      	adcs	r3, r3
 8004dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004df0:	4641      	mov	r1, r8
 8004df2:	eb12 0a01 	adds.w	sl, r2, r1
 8004df6:	4649      	mov	r1, r9
 8004df8:	eb43 0b01 	adc.w	fp, r3, r1
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e10:	4692      	mov	sl, r2
 8004e12:	469b      	mov	fp, r3
 8004e14:	4643      	mov	r3, r8
 8004e16:	eb1a 0303 	adds.w	r3, sl, r3
 8004e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	eb4b 0303 	adc.w	r3, fp, r3
 8004e24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	18db      	adds	r3, r3, r3
 8004e40:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e42:	4613      	mov	r3, r2
 8004e44:	eb42 0303 	adc.w	r3, r2, r3
 8004e48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e52:	f7fb fd13 	bl	800087c <__aeabi_uldivmod>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f4c <UART_SetConfig+0x2d4>)
 8004e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2264      	movs	r2, #100	@ 0x64
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	1acb      	subs	r3, r1, r3
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e72:	4b36      	ldr	r3, [pc, #216]	@ (8004f4c <UART_SetConfig+0x2d4>)
 8004e74:	fba3 2302 	umull	r2, r3, r3, r2
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e80:	441c      	add	r4, r3
 8004e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	1891      	adds	r1, r2, r2
 8004e9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e9c:	415b      	adcs	r3, r3
 8004e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	1851      	adds	r1, r2, r1
 8004ea8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004eaa:	4649      	mov	r1, r9
 8004eac:	414b      	adcs	r3, r1
 8004eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ebc:	4659      	mov	r1, fp
 8004ebe:	00cb      	lsls	r3, r1, #3
 8004ec0:	4651      	mov	r1, sl
 8004ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ec6:	4651      	mov	r1, sl
 8004ec8:	00ca      	lsls	r2, r1, #3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	189b      	adds	r3, r3, r2
 8004ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ed8:	464b      	mov	r3, r9
 8004eda:	460a      	mov	r2, r1
 8004edc:	eb42 0303 	adc.w	r3, r2, r3
 8004ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ef0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ef8:	460b      	mov	r3, r1
 8004efa:	18db      	adds	r3, r3, r3
 8004efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004efe:	4613      	mov	r3, r2
 8004f00:	eb42 0303 	adc.w	r3, r2, r3
 8004f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f0e:	f7fb fcb5 	bl	800087c <__aeabi_uldivmod>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4b0d      	ldr	r3, [pc, #52]	@ (8004f4c <UART_SetConfig+0x2d4>)
 8004f18:	fba3 1302 	umull	r1, r3, r3, r2
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	2164      	movs	r1, #100	@ 0x64
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	3332      	adds	r3, #50	@ 0x32
 8004f2a:	4a08      	ldr	r2, [pc, #32]	@ (8004f4c <UART_SetConfig+0x2d4>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	f003 0207 	and.w	r2, r3, #7
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4422      	add	r2, r4
 8004f3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f40:	e106      	b.n	8005150 <UART_SetConfig+0x4d8>
 8004f42:	bf00      	nop
 8004f44:	40011000 	.word	0x40011000
 8004f48:	40011400 	.word	0x40011400
 8004f4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f62:	4642      	mov	r2, r8
 8004f64:	464b      	mov	r3, r9
 8004f66:	1891      	adds	r1, r2, r2
 8004f68:	6239      	str	r1, [r7, #32]
 8004f6a:	415b      	adcs	r3, r3
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f72:	4641      	mov	r1, r8
 8004f74:	1854      	adds	r4, r2, r1
 8004f76:	4649      	mov	r1, r9
 8004f78:	eb43 0501 	adc.w	r5, r3, r1
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	00eb      	lsls	r3, r5, #3
 8004f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f8a:	00e2      	lsls	r2, r4, #3
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	461d      	mov	r5, r3
 8004f90:	4643      	mov	r3, r8
 8004f92:	18e3      	adds	r3, r4, r3
 8004f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f98:	464b      	mov	r3, r9
 8004f9a:	eb45 0303 	adc.w	r3, r5, r3
 8004f9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	008b      	lsls	r3, r1, #2
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc8:	4621      	mov	r1, r4
 8004fca:	008a      	lsls	r2, r1, #2
 8004fcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fd0:	f7fb fc54 	bl	800087c <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4b60      	ldr	r3, [pc, #384]	@ (800515c <UART_SetConfig+0x4e4>)
 8004fda:	fba3 2302 	umull	r2, r3, r3, r2
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	011c      	lsls	r4, r3, #4
 8004fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ff0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	1891      	adds	r1, r2, r2
 8004ffa:	61b9      	str	r1, [r7, #24]
 8004ffc:	415b      	adcs	r3, r3
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005004:	4641      	mov	r1, r8
 8005006:	1851      	adds	r1, r2, r1
 8005008:	6139      	str	r1, [r7, #16]
 800500a:	4649      	mov	r1, r9
 800500c:	414b      	adcs	r3, r1
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800501c:	4659      	mov	r1, fp
 800501e:	00cb      	lsls	r3, r1, #3
 8005020:	4651      	mov	r1, sl
 8005022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005026:	4651      	mov	r1, sl
 8005028:	00ca      	lsls	r2, r1, #3
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	4603      	mov	r3, r0
 8005030:	4642      	mov	r2, r8
 8005032:	189b      	adds	r3, r3, r2
 8005034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005038:	464b      	mov	r3, r9
 800503a:	460a      	mov	r2, r1
 800503c:	eb42 0303 	adc.w	r3, r2, r3
 8005040:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800504e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800505c:	4649      	mov	r1, r9
 800505e:	008b      	lsls	r3, r1, #2
 8005060:	4641      	mov	r1, r8
 8005062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005066:	4641      	mov	r1, r8
 8005068:	008a      	lsls	r2, r1, #2
 800506a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800506e:	f7fb fc05 	bl	800087c <__aeabi_uldivmod>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4611      	mov	r1, r2
 8005078:	4b38      	ldr	r3, [pc, #224]	@ (800515c <UART_SetConfig+0x4e4>)
 800507a:	fba3 2301 	umull	r2, r3, r3, r1
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	2264      	movs	r2, #100	@ 0x64
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	1acb      	subs	r3, r1, r3
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	3332      	adds	r3, #50	@ 0x32
 800508c:	4a33      	ldr	r2, [pc, #204]	@ (800515c <UART_SetConfig+0x4e4>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005098:	441c      	add	r4, r3
 800509a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509e:	2200      	movs	r2, #0
 80050a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80050a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80050a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050a8:	4642      	mov	r2, r8
 80050aa:	464b      	mov	r3, r9
 80050ac:	1891      	adds	r1, r2, r2
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	415b      	adcs	r3, r3
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050b8:	4641      	mov	r1, r8
 80050ba:	1851      	adds	r1, r2, r1
 80050bc:	6039      	str	r1, [r7, #0]
 80050be:	4649      	mov	r1, r9
 80050c0:	414b      	adcs	r3, r1
 80050c2:	607b      	str	r3, [r7, #4]
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050d0:	4659      	mov	r1, fp
 80050d2:	00cb      	lsls	r3, r1, #3
 80050d4:	4651      	mov	r1, sl
 80050d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050da:	4651      	mov	r1, sl
 80050dc:	00ca      	lsls	r2, r1, #3
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	4642      	mov	r2, r8
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050ea:	464b      	mov	r3, r9
 80050ec:	460a      	mov	r2, r1
 80050ee:	eb42 0303 	adc.w	r3, r2, r3
 80050f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80050fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800510c:	4649      	mov	r1, r9
 800510e:	008b      	lsls	r3, r1, #2
 8005110:	4641      	mov	r1, r8
 8005112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005116:	4641      	mov	r1, r8
 8005118:	008a      	lsls	r2, r1, #2
 800511a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800511e:	f7fb fbad 	bl	800087c <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4b0d      	ldr	r3, [pc, #52]	@ (800515c <UART_SetConfig+0x4e4>)
 8005128:	fba3 1302 	umull	r1, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	2164      	movs	r1, #100	@ 0x64
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	3332      	adds	r3, #50	@ 0x32
 800513a:	4a08      	ldr	r2, [pc, #32]	@ (800515c <UART_SetConfig+0x4e4>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	f003 020f 	and.w	r2, r3, #15
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4422      	add	r2, r4
 800514e:	609a      	str	r2, [r3, #8]
}
 8005150:	bf00      	nop
 8005152:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005156:	46bd      	mov	sp, r7
 8005158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800515c:	51eb851f 	.word	0x51eb851f

08005160 <siprintf>:
 8005160:	b40e      	push	{r1, r2, r3}
 8005162:	b500      	push	{lr}
 8005164:	b09c      	sub	sp, #112	@ 0x70
 8005166:	ab1d      	add	r3, sp, #116	@ 0x74
 8005168:	9002      	str	r0, [sp, #8]
 800516a:	9006      	str	r0, [sp, #24]
 800516c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005170:	4809      	ldr	r0, [pc, #36]	@ (8005198 <siprintf+0x38>)
 8005172:	9107      	str	r1, [sp, #28]
 8005174:	9104      	str	r1, [sp, #16]
 8005176:	4909      	ldr	r1, [pc, #36]	@ (800519c <siprintf+0x3c>)
 8005178:	f853 2b04 	ldr.w	r2, [r3], #4
 800517c:	9105      	str	r1, [sp, #20]
 800517e:	6800      	ldr	r0, [r0, #0]
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	a902      	add	r1, sp, #8
 8005184:	f000 f994 	bl	80054b0 <_svfiprintf_r>
 8005188:	9b02      	ldr	r3, [sp, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	b01c      	add	sp, #112	@ 0x70
 8005190:	f85d eb04 	ldr.w	lr, [sp], #4
 8005194:	b003      	add	sp, #12
 8005196:	4770      	bx	lr
 8005198:	2000000c 	.word	0x2000000c
 800519c:	ffff0208 	.word	0xffff0208

080051a0 <memset>:
 80051a0:	4402      	add	r2, r0
 80051a2:	4603      	mov	r3, r0
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d100      	bne.n	80051aa <memset+0xa>
 80051a8:	4770      	bx	lr
 80051aa:	f803 1b01 	strb.w	r1, [r3], #1
 80051ae:	e7f9      	b.n	80051a4 <memset+0x4>

080051b0 <__errno>:
 80051b0:	4b01      	ldr	r3, [pc, #4]	@ (80051b8 <__errno+0x8>)
 80051b2:	6818      	ldr	r0, [r3, #0]
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	2000000c 	.word	0x2000000c

080051bc <__libc_init_array>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	4d0d      	ldr	r5, [pc, #52]	@ (80051f4 <__libc_init_array+0x38>)
 80051c0:	4c0d      	ldr	r4, [pc, #52]	@ (80051f8 <__libc_init_array+0x3c>)
 80051c2:	1b64      	subs	r4, r4, r5
 80051c4:	10a4      	asrs	r4, r4, #2
 80051c6:	2600      	movs	r6, #0
 80051c8:	42a6      	cmp	r6, r4
 80051ca:	d109      	bne.n	80051e0 <__libc_init_array+0x24>
 80051cc:	4d0b      	ldr	r5, [pc, #44]	@ (80051fc <__libc_init_array+0x40>)
 80051ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005200 <__libc_init_array+0x44>)
 80051d0:	f000 fc66 	bl	8005aa0 <_init>
 80051d4:	1b64      	subs	r4, r4, r5
 80051d6:	10a4      	asrs	r4, r4, #2
 80051d8:	2600      	movs	r6, #0
 80051da:	42a6      	cmp	r6, r4
 80051dc:	d105      	bne.n	80051ea <__libc_init_array+0x2e>
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e4:	4798      	blx	r3
 80051e6:	3601      	adds	r6, #1
 80051e8:	e7ee      	b.n	80051c8 <__libc_init_array+0xc>
 80051ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ee:	4798      	blx	r3
 80051f0:	3601      	adds	r6, #1
 80051f2:	e7f2      	b.n	80051da <__libc_init_array+0x1e>
 80051f4:	08005b2c 	.word	0x08005b2c
 80051f8:	08005b2c 	.word	0x08005b2c
 80051fc:	08005b2c 	.word	0x08005b2c
 8005200:	08005b30 	.word	0x08005b30

08005204 <__retarget_lock_acquire_recursive>:
 8005204:	4770      	bx	lr

08005206 <__retarget_lock_release_recursive>:
 8005206:	4770      	bx	lr

08005208 <_free_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4605      	mov	r5, r0
 800520c:	2900      	cmp	r1, #0
 800520e:	d041      	beq.n	8005294 <_free_r+0x8c>
 8005210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005214:	1f0c      	subs	r4, r1, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfb8      	it	lt
 800521a:	18e4      	addlt	r4, r4, r3
 800521c:	f000 f8e0 	bl	80053e0 <__malloc_lock>
 8005220:	4a1d      	ldr	r2, [pc, #116]	@ (8005298 <_free_r+0x90>)
 8005222:	6813      	ldr	r3, [r2, #0]
 8005224:	b933      	cbnz	r3, 8005234 <_free_r+0x2c>
 8005226:	6063      	str	r3, [r4, #4]
 8005228:	6014      	str	r4, [r2, #0]
 800522a:	4628      	mov	r0, r5
 800522c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005230:	f000 b8dc 	b.w	80053ec <__malloc_unlock>
 8005234:	42a3      	cmp	r3, r4
 8005236:	d908      	bls.n	800524a <_free_r+0x42>
 8005238:	6820      	ldr	r0, [r4, #0]
 800523a:	1821      	adds	r1, r4, r0
 800523c:	428b      	cmp	r3, r1
 800523e:	bf01      	itttt	eq
 8005240:	6819      	ldreq	r1, [r3, #0]
 8005242:	685b      	ldreq	r3, [r3, #4]
 8005244:	1809      	addeq	r1, r1, r0
 8005246:	6021      	streq	r1, [r4, #0]
 8005248:	e7ed      	b.n	8005226 <_free_r+0x1e>
 800524a:	461a      	mov	r2, r3
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	b10b      	cbz	r3, 8005254 <_free_r+0x4c>
 8005250:	42a3      	cmp	r3, r4
 8005252:	d9fa      	bls.n	800524a <_free_r+0x42>
 8005254:	6811      	ldr	r1, [r2, #0]
 8005256:	1850      	adds	r0, r2, r1
 8005258:	42a0      	cmp	r0, r4
 800525a:	d10b      	bne.n	8005274 <_free_r+0x6c>
 800525c:	6820      	ldr	r0, [r4, #0]
 800525e:	4401      	add	r1, r0
 8005260:	1850      	adds	r0, r2, r1
 8005262:	4283      	cmp	r3, r0
 8005264:	6011      	str	r1, [r2, #0]
 8005266:	d1e0      	bne.n	800522a <_free_r+0x22>
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	6053      	str	r3, [r2, #4]
 800526e:	4408      	add	r0, r1
 8005270:	6010      	str	r0, [r2, #0]
 8005272:	e7da      	b.n	800522a <_free_r+0x22>
 8005274:	d902      	bls.n	800527c <_free_r+0x74>
 8005276:	230c      	movs	r3, #12
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	e7d6      	b.n	800522a <_free_r+0x22>
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	1821      	adds	r1, r4, r0
 8005280:	428b      	cmp	r3, r1
 8005282:	bf04      	itt	eq
 8005284:	6819      	ldreq	r1, [r3, #0]
 8005286:	685b      	ldreq	r3, [r3, #4]
 8005288:	6063      	str	r3, [r4, #4]
 800528a:	bf04      	itt	eq
 800528c:	1809      	addeq	r1, r1, r0
 800528e:	6021      	streq	r1, [r4, #0]
 8005290:	6054      	str	r4, [r2, #4]
 8005292:	e7ca      	b.n	800522a <_free_r+0x22>
 8005294:	bd38      	pop	{r3, r4, r5, pc}
 8005296:	bf00      	nop
 8005298:	200003ac 	.word	0x200003ac

0800529c <sbrk_aligned>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4e0f      	ldr	r6, [pc, #60]	@ (80052dc <sbrk_aligned+0x40>)
 80052a0:	460c      	mov	r4, r1
 80052a2:	6831      	ldr	r1, [r6, #0]
 80052a4:	4605      	mov	r5, r0
 80052a6:	b911      	cbnz	r1, 80052ae <sbrk_aligned+0x12>
 80052a8:	f000 fba6 	bl	80059f8 <_sbrk_r>
 80052ac:	6030      	str	r0, [r6, #0]
 80052ae:	4621      	mov	r1, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 fba1 	bl	80059f8 <_sbrk_r>
 80052b6:	1c43      	adds	r3, r0, #1
 80052b8:	d103      	bne.n	80052c2 <sbrk_aligned+0x26>
 80052ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80052be:	4620      	mov	r0, r4
 80052c0:	bd70      	pop	{r4, r5, r6, pc}
 80052c2:	1cc4      	adds	r4, r0, #3
 80052c4:	f024 0403 	bic.w	r4, r4, #3
 80052c8:	42a0      	cmp	r0, r4
 80052ca:	d0f8      	beq.n	80052be <sbrk_aligned+0x22>
 80052cc:	1a21      	subs	r1, r4, r0
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 fb92 	bl	80059f8 <_sbrk_r>
 80052d4:	3001      	adds	r0, #1
 80052d6:	d1f2      	bne.n	80052be <sbrk_aligned+0x22>
 80052d8:	e7ef      	b.n	80052ba <sbrk_aligned+0x1e>
 80052da:	bf00      	nop
 80052dc:	200003a8 	.word	0x200003a8

080052e0 <_malloc_r>:
 80052e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e4:	1ccd      	adds	r5, r1, #3
 80052e6:	f025 0503 	bic.w	r5, r5, #3
 80052ea:	3508      	adds	r5, #8
 80052ec:	2d0c      	cmp	r5, #12
 80052ee:	bf38      	it	cc
 80052f0:	250c      	movcc	r5, #12
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	4606      	mov	r6, r0
 80052f6:	db01      	blt.n	80052fc <_malloc_r+0x1c>
 80052f8:	42a9      	cmp	r1, r5
 80052fa:	d904      	bls.n	8005306 <_malloc_r+0x26>
 80052fc:	230c      	movs	r3, #12
 80052fe:	6033      	str	r3, [r6, #0]
 8005300:	2000      	movs	r0, #0
 8005302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053dc <_malloc_r+0xfc>
 800530a:	f000 f869 	bl	80053e0 <__malloc_lock>
 800530e:	f8d8 3000 	ldr.w	r3, [r8]
 8005312:	461c      	mov	r4, r3
 8005314:	bb44      	cbnz	r4, 8005368 <_malloc_r+0x88>
 8005316:	4629      	mov	r1, r5
 8005318:	4630      	mov	r0, r6
 800531a:	f7ff ffbf 	bl	800529c <sbrk_aligned>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	4604      	mov	r4, r0
 8005322:	d158      	bne.n	80053d6 <_malloc_r+0xf6>
 8005324:	f8d8 4000 	ldr.w	r4, [r8]
 8005328:	4627      	mov	r7, r4
 800532a:	2f00      	cmp	r7, #0
 800532c:	d143      	bne.n	80053b6 <_malloc_r+0xd6>
 800532e:	2c00      	cmp	r4, #0
 8005330:	d04b      	beq.n	80053ca <_malloc_r+0xea>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	4639      	mov	r1, r7
 8005336:	4630      	mov	r0, r6
 8005338:	eb04 0903 	add.w	r9, r4, r3
 800533c:	f000 fb5c 	bl	80059f8 <_sbrk_r>
 8005340:	4581      	cmp	r9, r0
 8005342:	d142      	bne.n	80053ca <_malloc_r+0xea>
 8005344:	6821      	ldr	r1, [r4, #0]
 8005346:	1a6d      	subs	r5, r5, r1
 8005348:	4629      	mov	r1, r5
 800534a:	4630      	mov	r0, r6
 800534c:	f7ff ffa6 	bl	800529c <sbrk_aligned>
 8005350:	3001      	adds	r0, #1
 8005352:	d03a      	beq.n	80053ca <_malloc_r+0xea>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	442b      	add	r3, r5
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	f8d8 3000 	ldr.w	r3, [r8]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	bb62      	cbnz	r2, 80053bc <_malloc_r+0xdc>
 8005362:	f8c8 7000 	str.w	r7, [r8]
 8005366:	e00f      	b.n	8005388 <_malloc_r+0xa8>
 8005368:	6822      	ldr	r2, [r4, #0]
 800536a:	1b52      	subs	r2, r2, r5
 800536c:	d420      	bmi.n	80053b0 <_malloc_r+0xd0>
 800536e:	2a0b      	cmp	r2, #11
 8005370:	d917      	bls.n	80053a2 <_malloc_r+0xc2>
 8005372:	1961      	adds	r1, r4, r5
 8005374:	42a3      	cmp	r3, r4
 8005376:	6025      	str	r5, [r4, #0]
 8005378:	bf18      	it	ne
 800537a:	6059      	strne	r1, [r3, #4]
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	bf08      	it	eq
 8005380:	f8c8 1000 	streq.w	r1, [r8]
 8005384:	5162      	str	r2, [r4, r5]
 8005386:	604b      	str	r3, [r1, #4]
 8005388:	4630      	mov	r0, r6
 800538a:	f000 f82f 	bl	80053ec <__malloc_unlock>
 800538e:	f104 000b 	add.w	r0, r4, #11
 8005392:	1d23      	adds	r3, r4, #4
 8005394:	f020 0007 	bic.w	r0, r0, #7
 8005398:	1ac2      	subs	r2, r0, r3
 800539a:	bf1c      	itt	ne
 800539c:	1a1b      	subne	r3, r3, r0
 800539e:	50a3      	strne	r3, [r4, r2]
 80053a0:	e7af      	b.n	8005302 <_malloc_r+0x22>
 80053a2:	6862      	ldr	r2, [r4, #4]
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	bf0c      	ite	eq
 80053a8:	f8c8 2000 	streq.w	r2, [r8]
 80053ac:	605a      	strne	r2, [r3, #4]
 80053ae:	e7eb      	b.n	8005388 <_malloc_r+0xa8>
 80053b0:	4623      	mov	r3, r4
 80053b2:	6864      	ldr	r4, [r4, #4]
 80053b4:	e7ae      	b.n	8005314 <_malloc_r+0x34>
 80053b6:	463c      	mov	r4, r7
 80053b8:	687f      	ldr	r7, [r7, #4]
 80053ba:	e7b6      	b.n	800532a <_malloc_r+0x4a>
 80053bc:	461a      	mov	r2, r3
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	d1fb      	bne.n	80053bc <_malloc_r+0xdc>
 80053c4:	2300      	movs	r3, #0
 80053c6:	6053      	str	r3, [r2, #4]
 80053c8:	e7de      	b.n	8005388 <_malloc_r+0xa8>
 80053ca:	230c      	movs	r3, #12
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	4630      	mov	r0, r6
 80053d0:	f000 f80c 	bl	80053ec <__malloc_unlock>
 80053d4:	e794      	b.n	8005300 <_malloc_r+0x20>
 80053d6:	6005      	str	r5, [r0, #0]
 80053d8:	e7d6      	b.n	8005388 <_malloc_r+0xa8>
 80053da:	bf00      	nop
 80053dc:	200003ac 	.word	0x200003ac

080053e0 <__malloc_lock>:
 80053e0:	4801      	ldr	r0, [pc, #4]	@ (80053e8 <__malloc_lock+0x8>)
 80053e2:	f7ff bf0f 	b.w	8005204 <__retarget_lock_acquire_recursive>
 80053e6:	bf00      	nop
 80053e8:	200003a4 	.word	0x200003a4

080053ec <__malloc_unlock>:
 80053ec:	4801      	ldr	r0, [pc, #4]	@ (80053f4 <__malloc_unlock+0x8>)
 80053ee:	f7ff bf0a 	b.w	8005206 <__retarget_lock_release_recursive>
 80053f2:	bf00      	nop
 80053f4:	200003a4 	.word	0x200003a4

080053f8 <__ssputs_r>:
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	688e      	ldr	r6, [r1, #8]
 80053fe:	461f      	mov	r7, r3
 8005400:	42be      	cmp	r6, r7
 8005402:	680b      	ldr	r3, [r1, #0]
 8005404:	4682      	mov	sl, r0
 8005406:	460c      	mov	r4, r1
 8005408:	4690      	mov	r8, r2
 800540a:	d82d      	bhi.n	8005468 <__ssputs_r+0x70>
 800540c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005410:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005414:	d026      	beq.n	8005464 <__ssputs_r+0x6c>
 8005416:	6965      	ldr	r5, [r4, #20]
 8005418:	6909      	ldr	r1, [r1, #16]
 800541a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800541e:	eba3 0901 	sub.w	r9, r3, r1
 8005422:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005426:	1c7b      	adds	r3, r7, #1
 8005428:	444b      	add	r3, r9
 800542a:	106d      	asrs	r5, r5, #1
 800542c:	429d      	cmp	r5, r3
 800542e:	bf38      	it	cc
 8005430:	461d      	movcc	r5, r3
 8005432:	0553      	lsls	r3, r2, #21
 8005434:	d527      	bpl.n	8005486 <__ssputs_r+0x8e>
 8005436:	4629      	mov	r1, r5
 8005438:	f7ff ff52 	bl	80052e0 <_malloc_r>
 800543c:	4606      	mov	r6, r0
 800543e:	b360      	cbz	r0, 800549a <__ssputs_r+0xa2>
 8005440:	6921      	ldr	r1, [r4, #16]
 8005442:	464a      	mov	r2, r9
 8005444:	f000 fae8 	bl	8005a18 <memcpy>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800544e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	6126      	str	r6, [r4, #16]
 8005456:	6165      	str	r5, [r4, #20]
 8005458:	444e      	add	r6, r9
 800545a:	eba5 0509 	sub.w	r5, r5, r9
 800545e:	6026      	str	r6, [r4, #0]
 8005460:	60a5      	str	r5, [r4, #8]
 8005462:	463e      	mov	r6, r7
 8005464:	42be      	cmp	r6, r7
 8005466:	d900      	bls.n	800546a <__ssputs_r+0x72>
 8005468:	463e      	mov	r6, r7
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	4632      	mov	r2, r6
 800546e:	4641      	mov	r1, r8
 8005470:	f000 faa8 	bl	80059c4 <memmove>
 8005474:	68a3      	ldr	r3, [r4, #8]
 8005476:	1b9b      	subs	r3, r3, r6
 8005478:	60a3      	str	r3, [r4, #8]
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	4433      	add	r3, r6
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	2000      	movs	r0, #0
 8005482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005486:	462a      	mov	r2, r5
 8005488:	f000 fad4 	bl	8005a34 <_realloc_r>
 800548c:	4606      	mov	r6, r0
 800548e:	2800      	cmp	r0, #0
 8005490:	d1e0      	bne.n	8005454 <__ssputs_r+0x5c>
 8005492:	6921      	ldr	r1, [r4, #16]
 8005494:	4650      	mov	r0, sl
 8005496:	f7ff feb7 	bl	8005208 <_free_r>
 800549a:	230c      	movs	r3, #12
 800549c:	f8ca 3000 	str.w	r3, [sl]
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a6:	81a3      	strh	r3, [r4, #12]
 80054a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054ac:	e7e9      	b.n	8005482 <__ssputs_r+0x8a>
	...

080054b0 <_svfiprintf_r>:
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	4698      	mov	r8, r3
 80054b6:	898b      	ldrh	r3, [r1, #12]
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	b09d      	sub	sp, #116	@ 0x74
 80054bc:	4607      	mov	r7, r0
 80054be:	460d      	mov	r5, r1
 80054c0:	4614      	mov	r4, r2
 80054c2:	d510      	bpl.n	80054e6 <_svfiprintf_r+0x36>
 80054c4:	690b      	ldr	r3, [r1, #16]
 80054c6:	b973      	cbnz	r3, 80054e6 <_svfiprintf_r+0x36>
 80054c8:	2140      	movs	r1, #64	@ 0x40
 80054ca:	f7ff ff09 	bl	80052e0 <_malloc_r>
 80054ce:	6028      	str	r0, [r5, #0]
 80054d0:	6128      	str	r0, [r5, #16]
 80054d2:	b930      	cbnz	r0, 80054e2 <_svfiprintf_r+0x32>
 80054d4:	230c      	movs	r3, #12
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054dc:	b01d      	add	sp, #116	@ 0x74
 80054de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e2:	2340      	movs	r3, #64	@ 0x40
 80054e4:	616b      	str	r3, [r5, #20]
 80054e6:	2300      	movs	r3, #0
 80054e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ea:	2320      	movs	r3, #32
 80054ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80054f4:	2330      	movs	r3, #48	@ 0x30
 80054f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005694 <_svfiprintf_r+0x1e4>
 80054fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054fe:	f04f 0901 	mov.w	r9, #1
 8005502:	4623      	mov	r3, r4
 8005504:	469a      	mov	sl, r3
 8005506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800550a:	b10a      	cbz	r2, 8005510 <_svfiprintf_r+0x60>
 800550c:	2a25      	cmp	r2, #37	@ 0x25
 800550e:	d1f9      	bne.n	8005504 <_svfiprintf_r+0x54>
 8005510:	ebba 0b04 	subs.w	fp, sl, r4
 8005514:	d00b      	beq.n	800552e <_svfiprintf_r+0x7e>
 8005516:	465b      	mov	r3, fp
 8005518:	4622      	mov	r2, r4
 800551a:	4629      	mov	r1, r5
 800551c:	4638      	mov	r0, r7
 800551e:	f7ff ff6b 	bl	80053f8 <__ssputs_r>
 8005522:	3001      	adds	r0, #1
 8005524:	f000 80a7 	beq.w	8005676 <_svfiprintf_r+0x1c6>
 8005528:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800552a:	445a      	add	r2, fp
 800552c:	9209      	str	r2, [sp, #36]	@ 0x24
 800552e:	f89a 3000 	ldrb.w	r3, [sl]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 809f 	beq.w	8005676 <_svfiprintf_r+0x1c6>
 8005538:	2300      	movs	r3, #0
 800553a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800553e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005542:	f10a 0a01 	add.w	sl, sl, #1
 8005546:	9304      	str	r3, [sp, #16]
 8005548:	9307      	str	r3, [sp, #28]
 800554a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800554e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005550:	4654      	mov	r4, sl
 8005552:	2205      	movs	r2, #5
 8005554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005558:	484e      	ldr	r0, [pc, #312]	@ (8005694 <_svfiprintf_r+0x1e4>)
 800555a:	f7fa fe39 	bl	80001d0 <memchr>
 800555e:	9a04      	ldr	r2, [sp, #16]
 8005560:	b9d8      	cbnz	r0, 800559a <_svfiprintf_r+0xea>
 8005562:	06d0      	lsls	r0, r2, #27
 8005564:	bf44      	itt	mi
 8005566:	2320      	movmi	r3, #32
 8005568:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800556c:	0711      	lsls	r1, r2, #28
 800556e:	bf44      	itt	mi
 8005570:	232b      	movmi	r3, #43	@ 0x2b
 8005572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005576:	f89a 3000 	ldrb.w	r3, [sl]
 800557a:	2b2a      	cmp	r3, #42	@ 0x2a
 800557c:	d015      	beq.n	80055aa <_svfiprintf_r+0xfa>
 800557e:	9a07      	ldr	r2, [sp, #28]
 8005580:	4654      	mov	r4, sl
 8005582:	2000      	movs	r0, #0
 8005584:	f04f 0c0a 	mov.w	ip, #10
 8005588:	4621      	mov	r1, r4
 800558a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800558e:	3b30      	subs	r3, #48	@ 0x30
 8005590:	2b09      	cmp	r3, #9
 8005592:	d94b      	bls.n	800562c <_svfiprintf_r+0x17c>
 8005594:	b1b0      	cbz	r0, 80055c4 <_svfiprintf_r+0x114>
 8005596:	9207      	str	r2, [sp, #28]
 8005598:	e014      	b.n	80055c4 <_svfiprintf_r+0x114>
 800559a:	eba0 0308 	sub.w	r3, r0, r8
 800559e:	fa09 f303 	lsl.w	r3, r9, r3
 80055a2:	4313      	orrs	r3, r2
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	46a2      	mov	sl, r4
 80055a8:	e7d2      	b.n	8005550 <_svfiprintf_r+0xa0>
 80055aa:	9b03      	ldr	r3, [sp, #12]
 80055ac:	1d19      	adds	r1, r3, #4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	9103      	str	r1, [sp, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bfbb      	ittet	lt
 80055b6:	425b      	neglt	r3, r3
 80055b8:	f042 0202 	orrlt.w	r2, r2, #2
 80055bc:	9307      	strge	r3, [sp, #28]
 80055be:	9307      	strlt	r3, [sp, #28]
 80055c0:	bfb8      	it	lt
 80055c2:	9204      	strlt	r2, [sp, #16]
 80055c4:	7823      	ldrb	r3, [r4, #0]
 80055c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80055c8:	d10a      	bne.n	80055e0 <_svfiprintf_r+0x130>
 80055ca:	7863      	ldrb	r3, [r4, #1]
 80055cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ce:	d132      	bne.n	8005636 <_svfiprintf_r+0x186>
 80055d0:	9b03      	ldr	r3, [sp, #12]
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	9203      	str	r2, [sp, #12]
 80055d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055dc:	3402      	adds	r4, #2
 80055de:	9305      	str	r3, [sp, #20]
 80055e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056a4 <_svfiprintf_r+0x1f4>
 80055e4:	7821      	ldrb	r1, [r4, #0]
 80055e6:	2203      	movs	r2, #3
 80055e8:	4650      	mov	r0, sl
 80055ea:	f7fa fdf1 	bl	80001d0 <memchr>
 80055ee:	b138      	cbz	r0, 8005600 <_svfiprintf_r+0x150>
 80055f0:	9b04      	ldr	r3, [sp, #16]
 80055f2:	eba0 000a 	sub.w	r0, r0, sl
 80055f6:	2240      	movs	r2, #64	@ 0x40
 80055f8:	4082      	lsls	r2, r0
 80055fa:	4313      	orrs	r3, r2
 80055fc:	3401      	adds	r4, #1
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005604:	4824      	ldr	r0, [pc, #144]	@ (8005698 <_svfiprintf_r+0x1e8>)
 8005606:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800560a:	2206      	movs	r2, #6
 800560c:	f7fa fde0 	bl	80001d0 <memchr>
 8005610:	2800      	cmp	r0, #0
 8005612:	d036      	beq.n	8005682 <_svfiprintf_r+0x1d2>
 8005614:	4b21      	ldr	r3, [pc, #132]	@ (800569c <_svfiprintf_r+0x1ec>)
 8005616:	bb1b      	cbnz	r3, 8005660 <_svfiprintf_r+0x1b0>
 8005618:	9b03      	ldr	r3, [sp, #12]
 800561a:	3307      	adds	r3, #7
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	3308      	adds	r3, #8
 8005622:	9303      	str	r3, [sp, #12]
 8005624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005626:	4433      	add	r3, r6
 8005628:	9309      	str	r3, [sp, #36]	@ 0x24
 800562a:	e76a      	b.n	8005502 <_svfiprintf_r+0x52>
 800562c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005630:	460c      	mov	r4, r1
 8005632:	2001      	movs	r0, #1
 8005634:	e7a8      	b.n	8005588 <_svfiprintf_r+0xd8>
 8005636:	2300      	movs	r3, #0
 8005638:	3401      	adds	r4, #1
 800563a:	9305      	str	r3, [sp, #20]
 800563c:	4619      	mov	r1, r3
 800563e:	f04f 0c0a 	mov.w	ip, #10
 8005642:	4620      	mov	r0, r4
 8005644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005648:	3a30      	subs	r2, #48	@ 0x30
 800564a:	2a09      	cmp	r2, #9
 800564c:	d903      	bls.n	8005656 <_svfiprintf_r+0x1a6>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0c6      	beq.n	80055e0 <_svfiprintf_r+0x130>
 8005652:	9105      	str	r1, [sp, #20]
 8005654:	e7c4      	b.n	80055e0 <_svfiprintf_r+0x130>
 8005656:	fb0c 2101 	mla	r1, ip, r1, r2
 800565a:	4604      	mov	r4, r0
 800565c:	2301      	movs	r3, #1
 800565e:	e7f0      	b.n	8005642 <_svfiprintf_r+0x192>
 8005660:	ab03      	add	r3, sp, #12
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	462a      	mov	r2, r5
 8005666:	4b0e      	ldr	r3, [pc, #56]	@ (80056a0 <_svfiprintf_r+0x1f0>)
 8005668:	a904      	add	r1, sp, #16
 800566a:	4638      	mov	r0, r7
 800566c:	f3af 8000 	nop.w
 8005670:	1c42      	adds	r2, r0, #1
 8005672:	4606      	mov	r6, r0
 8005674:	d1d6      	bne.n	8005624 <_svfiprintf_r+0x174>
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	065b      	lsls	r3, r3, #25
 800567a:	f53f af2d 	bmi.w	80054d8 <_svfiprintf_r+0x28>
 800567e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005680:	e72c      	b.n	80054dc <_svfiprintf_r+0x2c>
 8005682:	ab03      	add	r3, sp, #12
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	462a      	mov	r2, r5
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <_svfiprintf_r+0x1f0>)
 800568a:	a904      	add	r1, sp, #16
 800568c:	4638      	mov	r0, r7
 800568e:	f000 f879 	bl	8005784 <_printf_i>
 8005692:	e7ed      	b.n	8005670 <_svfiprintf_r+0x1c0>
 8005694:	08005af0 	.word	0x08005af0
 8005698:	08005afa 	.word	0x08005afa
 800569c:	00000000 	.word	0x00000000
 80056a0:	080053f9 	.word	0x080053f9
 80056a4:	08005af6 	.word	0x08005af6

080056a8 <_printf_common>:
 80056a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ac:	4616      	mov	r6, r2
 80056ae:	4698      	mov	r8, r3
 80056b0:	688a      	ldr	r2, [r1, #8]
 80056b2:	690b      	ldr	r3, [r1, #16]
 80056b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056b8:	4293      	cmp	r3, r2
 80056ba:	bfb8      	it	lt
 80056bc:	4613      	movlt	r3, r2
 80056be:	6033      	str	r3, [r6, #0]
 80056c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056c4:	4607      	mov	r7, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	b10a      	cbz	r2, 80056ce <_printf_common+0x26>
 80056ca:	3301      	adds	r3, #1
 80056cc:	6033      	str	r3, [r6, #0]
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	0699      	lsls	r1, r3, #26
 80056d2:	bf42      	ittt	mi
 80056d4:	6833      	ldrmi	r3, [r6, #0]
 80056d6:	3302      	addmi	r3, #2
 80056d8:	6033      	strmi	r3, [r6, #0]
 80056da:	6825      	ldr	r5, [r4, #0]
 80056dc:	f015 0506 	ands.w	r5, r5, #6
 80056e0:	d106      	bne.n	80056f0 <_printf_common+0x48>
 80056e2:	f104 0a19 	add.w	sl, r4, #25
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	6832      	ldr	r2, [r6, #0]
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	42ab      	cmp	r3, r5
 80056ee:	dc26      	bgt.n	800573e <_printf_common+0x96>
 80056f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056f4:	6822      	ldr	r2, [r4, #0]
 80056f6:	3b00      	subs	r3, #0
 80056f8:	bf18      	it	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	0692      	lsls	r2, r2, #26
 80056fe:	d42b      	bmi.n	8005758 <_printf_common+0xb0>
 8005700:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005704:	4641      	mov	r1, r8
 8005706:	4638      	mov	r0, r7
 8005708:	47c8      	blx	r9
 800570a:	3001      	adds	r0, #1
 800570c:	d01e      	beq.n	800574c <_printf_common+0xa4>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	6922      	ldr	r2, [r4, #16]
 8005712:	f003 0306 	and.w	r3, r3, #6
 8005716:	2b04      	cmp	r3, #4
 8005718:	bf02      	ittt	eq
 800571a:	68e5      	ldreq	r5, [r4, #12]
 800571c:	6833      	ldreq	r3, [r6, #0]
 800571e:	1aed      	subeq	r5, r5, r3
 8005720:	68a3      	ldr	r3, [r4, #8]
 8005722:	bf0c      	ite	eq
 8005724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005728:	2500      	movne	r5, #0
 800572a:	4293      	cmp	r3, r2
 800572c:	bfc4      	itt	gt
 800572e:	1a9b      	subgt	r3, r3, r2
 8005730:	18ed      	addgt	r5, r5, r3
 8005732:	2600      	movs	r6, #0
 8005734:	341a      	adds	r4, #26
 8005736:	42b5      	cmp	r5, r6
 8005738:	d11a      	bne.n	8005770 <_printf_common+0xc8>
 800573a:	2000      	movs	r0, #0
 800573c:	e008      	b.n	8005750 <_printf_common+0xa8>
 800573e:	2301      	movs	r3, #1
 8005740:	4652      	mov	r2, sl
 8005742:	4641      	mov	r1, r8
 8005744:	4638      	mov	r0, r7
 8005746:	47c8      	blx	r9
 8005748:	3001      	adds	r0, #1
 800574a:	d103      	bne.n	8005754 <_printf_common+0xac>
 800574c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005754:	3501      	adds	r5, #1
 8005756:	e7c6      	b.n	80056e6 <_printf_common+0x3e>
 8005758:	18e1      	adds	r1, r4, r3
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	2030      	movs	r0, #48	@ 0x30
 800575e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005762:	4422      	add	r2, r4
 8005764:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005768:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800576c:	3302      	adds	r3, #2
 800576e:	e7c7      	b.n	8005700 <_printf_common+0x58>
 8005770:	2301      	movs	r3, #1
 8005772:	4622      	mov	r2, r4
 8005774:	4641      	mov	r1, r8
 8005776:	4638      	mov	r0, r7
 8005778:	47c8      	blx	r9
 800577a:	3001      	adds	r0, #1
 800577c:	d0e6      	beq.n	800574c <_printf_common+0xa4>
 800577e:	3601      	adds	r6, #1
 8005780:	e7d9      	b.n	8005736 <_printf_common+0x8e>
	...

08005784 <_printf_i>:
 8005784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005788:	7e0f      	ldrb	r7, [r1, #24]
 800578a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800578c:	2f78      	cmp	r7, #120	@ 0x78
 800578e:	4691      	mov	r9, r2
 8005790:	4680      	mov	r8, r0
 8005792:	460c      	mov	r4, r1
 8005794:	469a      	mov	sl, r3
 8005796:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800579a:	d807      	bhi.n	80057ac <_printf_i+0x28>
 800579c:	2f62      	cmp	r7, #98	@ 0x62
 800579e:	d80a      	bhi.n	80057b6 <_printf_i+0x32>
 80057a0:	2f00      	cmp	r7, #0
 80057a2:	f000 80d2 	beq.w	800594a <_printf_i+0x1c6>
 80057a6:	2f58      	cmp	r7, #88	@ 0x58
 80057a8:	f000 80b9 	beq.w	800591e <_printf_i+0x19a>
 80057ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057b4:	e03a      	b.n	800582c <_printf_i+0xa8>
 80057b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057ba:	2b15      	cmp	r3, #21
 80057bc:	d8f6      	bhi.n	80057ac <_printf_i+0x28>
 80057be:	a101      	add	r1, pc, #4	@ (adr r1, 80057c4 <_printf_i+0x40>)
 80057c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057c4:	0800581d 	.word	0x0800581d
 80057c8:	08005831 	.word	0x08005831
 80057cc:	080057ad 	.word	0x080057ad
 80057d0:	080057ad 	.word	0x080057ad
 80057d4:	080057ad 	.word	0x080057ad
 80057d8:	080057ad 	.word	0x080057ad
 80057dc:	08005831 	.word	0x08005831
 80057e0:	080057ad 	.word	0x080057ad
 80057e4:	080057ad 	.word	0x080057ad
 80057e8:	080057ad 	.word	0x080057ad
 80057ec:	080057ad 	.word	0x080057ad
 80057f0:	08005931 	.word	0x08005931
 80057f4:	0800585b 	.word	0x0800585b
 80057f8:	080058eb 	.word	0x080058eb
 80057fc:	080057ad 	.word	0x080057ad
 8005800:	080057ad 	.word	0x080057ad
 8005804:	08005953 	.word	0x08005953
 8005808:	080057ad 	.word	0x080057ad
 800580c:	0800585b 	.word	0x0800585b
 8005810:	080057ad 	.word	0x080057ad
 8005814:	080057ad 	.word	0x080057ad
 8005818:	080058f3 	.word	0x080058f3
 800581c:	6833      	ldr	r3, [r6, #0]
 800581e:	1d1a      	adds	r2, r3, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6032      	str	r2, [r6, #0]
 8005824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005828:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800582c:	2301      	movs	r3, #1
 800582e:	e09d      	b.n	800596c <_printf_i+0x1e8>
 8005830:	6833      	ldr	r3, [r6, #0]
 8005832:	6820      	ldr	r0, [r4, #0]
 8005834:	1d19      	adds	r1, r3, #4
 8005836:	6031      	str	r1, [r6, #0]
 8005838:	0606      	lsls	r6, r0, #24
 800583a:	d501      	bpl.n	8005840 <_printf_i+0xbc>
 800583c:	681d      	ldr	r5, [r3, #0]
 800583e:	e003      	b.n	8005848 <_printf_i+0xc4>
 8005840:	0645      	lsls	r5, r0, #25
 8005842:	d5fb      	bpl.n	800583c <_printf_i+0xb8>
 8005844:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005848:	2d00      	cmp	r5, #0
 800584a:	da03      	bge.n	8005854 <_printf_i+0xd0>
 800584c:	232d      	movs	r3, #45	@ 0x2d
 800584e:	426d      	negs	r5, r5
 8005850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005854:	4859      	ldr	r0, [pc, #356]	@ (80059bc <_printf_i+0x238>)
 8005856:	230a      	movs	r3, #10
 8005858:	e011      	b.n	800587e <_printf_i+0xfa>
 800585a:	6821      	ldr	r1, [r4, #0]
 800585c:	6833      	ldr	r3, [r6, #0]
 800585e:	0608      	lsls	r0, r1, #24
 8005860:	f853 5b04 	ldr.w	r5, [r3], #4
 8005864:	d402      	bmi.n	800586c <_printf_i+0xe8>
 8005866:	0649      	lsls	r1, r1, #25
 8005868:	bf48      	it	mi
 800586a:	b2ad      	uxthmi	r5, r5
 800586c:	2f6f      	cmp	r7, #111	@ 0x6f
 800586e:	4853      	ldr	r0, [pc, #332]	@ (80059bc <_printf_i+0x238>)
 8005870:	6033      	str	r3, [r6, #0]
 8005872:	bf14      	ite	ne
 8005874:	230a      	movne	r3, #10
 8005876:	2308      	moveq	r3, #8
 8005878:	2100      	movs	r1, #0
 800587a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800587e:	6866      	ldr	r6, [r4, #4]
 8005880:	60a6      	str	r6, [r4, #8]
 8005882:	2e00      	cmp	r6, #0
 8005884:	bfa2      	ittt	ge
 8005886:	6821      	ldrge	r1, [r4, #0]
 8005888:	f021 0104 	bicge.w	r1, r1, #4
 800588c:	6021      	strge	r1, [r4, #0]
 800588e:	b90d      	cbnz	r5, 8005894 <_printf_i+0x110>
 8005890:	2e00      	cmp	r6, #0
 8005892:	d04b      	beq.n	800592c <_printf_i+0x1a8>
 8005894:	4616      	mov	r6, r2
 8005896:	fbb5 f1f3 	udiv	r1, r5, r3
 800589a:	fb03 5711 	mls	r7, r3, r1, r5
 800589e:	5dc7      	ldrb	r7, [r0, r7]
 80058a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058a4:	462f      	mov	r7, r5
 80058a6:	42bb      	cmp	r3, r7
 80058a8:	460d      	mov	r5, r1
 80058aa:	d9f4      	bls.n	8005896 <_printf_i+0x112>
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d10b      	bne.n	80058c8 <_printf_i+0x144>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	07df      	lsls	r7, r3, #31
 80058b4:	d508      	bpl.n	80058c8 <_printf_i+0x144>
 80058b6:	6923      	ldr	r3, [r4, #16]
 80058b8:	6861      	ldr	r1, [r4, #4]
 80058ba:	4299      	cmp	r1, r3
 80058bc:	bfde      	ittt	le
 80058be:	2330      	movle	r3, #48	@ 0x30
 80058c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80058c8:	1b92      	subs	r2, r2, r6
 80058ca:	6122      	str	r2, [r4, #16]
 80058cc:	f8cd a000 	str.w	sl, [sp]
 80058d0:	464b      	mov	r3, r9
 80058d2:	aa03      	add	r2, sp, #12
 80058d4:	4621      	mov	r1, r4
 80058d6:	4640      	mov	r0, r8
 80058d8:	f7ff fee6 	bl	80056a8 <_printf_common>
 80058dc:	3001      	adds	r0, #1
 80058de:	d14a      	bne.n	8005976 <_printf_i+0x1f2>
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058e4:	b004      	add	sp, #16
 80058e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	f043 0320 	orr.w	r3, r3, #32
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	4833      	ldr	r0, [pc, #204]	@ (80059c0 <_printf_i+0x23c>)
 80058f4:	2778      	movs	r7, #120	@ 0x78
 80058f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	6831      	ldr	r1, [r6, #0]
 80058fe:	061f      	lsls	r7, r3, #24
 8005900:	f851 5b04 	ldr.w	r5, [r1], #4
 8005904:	d402      	bmi.n	800590c <_printf_i+0x188>
 8005906:	065f      	lsls	r7, r3, #25
 8005908:	bf48      	it	mi
 800590a:	b2ad      	uxthmi	r5, r5
 800590c:	6031      	str	r1, [r6, #0]
 800590e:	07d9      	lsls	r1, r3, #31
 8005910:	bf44      	itt	mi
 8005912:	f043 0320 	orrmi.w	r3, r3, #32
 8005916:	6023      	strmi	r3, [r4, #0]
 8005918:	b11d      	cbz	r5, 8005922 <_printf_i+0x19e>
 800591a:	2310      	movs	r3, #16
 800591c:	e7ac      	b.n	8005878 <_printf_i+0xf4>
 800591e:	4827      	ldr	r0, [pc, #156]	@ (80059bc <_printf_i+0x238>)
 8005920:	e7e9      	b.n	80058f6 <_printf_i+0x172>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	f023 0320 	bic.w	r3, r3, #32
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	e7f6      	b.n	800591a <_printf_i+0x196>
 800592c:	4616      	mov	r6, r2
 800592e:	e7bd      	b.n	80058ac <_printf_i+0x128>
 8005930:	6833      	ldr	r3, [r6, #0]
 8005932:	6825      	ldr	r5, [r4, #0]
 8005934:	6961      	ldr	r1, [r4, #20]
 8005936:	1d18      	adds	r0, r3, #4
 8005938:	6030      	str	r0, [r6, #0]
 800593a:	062e      	lsls	r6, r5, #24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	d501      	bpl.n	8005944 <_printf_i+0x1c0>
 8005940:	6019      	str	r1, [r3, #0]
 8005942:	e002      	b.n	800594a <_printf_i+0x1c6>
 8005944:	0668      	lsls	r0, r5, #25
 8005946:	d5fb      	bpl.n	8005940 <_printf_i+0x1bc>
 8005948:	8019      	strh	r1, [r3, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	4616      	mov	r6, r2
 8005950:	e7bc      	b.n	80058cc <_printf_i+0x148>
 8005952:	6833      	ldr	r3, [r6, #0]
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	6032      	str	r2, [r6, #0]
 8005958:	681e      	ldr	r6, [r3, #0]
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	2100      	movs	r1, #0
 800595e:	4630      	mov	r0, r6
 8005960:	f7fa fc36 	bl	80001d0 <memchr>
 8005964:	b108      	cbz	r0, 800596a <_printf_i+0x1e6>
 8005966:	1b80      	subs	r0, r0, r6
 8005968:	6060      	str	r0, [r4, #4]
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	2300      	movs	r3, #0
 8005970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005974:	e7aa      	b.n	80058cc <_printf_i+0x148>
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	4632      	mov	r2, r6
 800597a:	4649      	mov	r1, r9
 800597c:	4640      	mov	r0, r8
 800597e:	47d0      	blx	sl
 8005980:	3001      	adds	r0, #1
 8005982:	d0ad      	beq.n	80058e0 <_printf_i+0x15c>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	079b      	lsls	r3, r3, #30
 8005988:	d413      	bmi.n	80059b2 <_printf_i+0x22e>
 800598a:	68e0      	ldr	r0, [r4, #12]
 800598c:	9b03      	ldr	r3, [sp, #12]
 800598e:	4298      	cmp	r0, r3
 8005990:	bfb8      	it	lt
 8005992:	4618      	movlt	r0, r3
 8005994:	e7a6      	b.n	80058e4 <_printf_i+0x160>
 8005996:	2301      	movs	r3, #1
 8005998:	4632      	mov	r2, r6
 800599a:	4649      	mov	r1, r9
 800599c:	4640      	mov	r0, r8
 800599e:	47d0      	blx	sl
 80059a0:	3001      	adds	r0, #1
 80059a2:	d09d      	beq.n	80058e0 <_printf_i+0x15c>
 80059a4:	3501      	adds	r5, #1
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	9903      	ldr	r1, [sp, #12]
 80059aa:	1a5b      	subs	r3, r3, r1
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dcf2      	bgt.n	8005996 <_printf_i+0x212>
 80059b0:	e7eb      	b.n	800598a <_printf_i+0x206>
 80059b2:	2500      	movs	r5, #0
 80059b4:	f104 0619 	add.w	r6, r4, #25
 80059b8:	e7f5      	b.n	80059a6 <_printf_i+0x222>
 80059ba:	bf00      	nop
 80059bc:	08005b01 	.word	0x08005b01
 80059c0:	08005b12 	.word	0x08005b12

080059c4 <memmove>:
 80059c4:	4288      	cmp	r0, r1
 80059c6:	b510      	push	{r4, lr}
 80059c8:	eb01 0402 	add.w	r4, r1, r2
 80059cc:	d902      	bls.n	80059d4 <memmove+0x10>
 80059ce:	4284      	cmp	r4, r0
 80059d0:	4623      	mov	r3, r4
 80059d2:	d807      	bhi.n	80059e4 <memmove+0x20>
 80059d4:	1e43      	subs	r3, r0, #1
 80059d6:	42a1      	cmp	r1, r4
 80059d8:	d008      	beq.n	80059ec <memmove+0x28>
 80059da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059e2:	e7f8      	b.n	80059d6 <memmove+0x12>
 80059e4:	4402      	add	r2, r0
 80059e6:	4601      	mov	r1, r0
 80059e8:	428a      	cmp	r2, r1
 80059ea:	d100      	bne.n	80059ee <memmove+0x2a>
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059f6:	e7f7      	b.n	80059e8 <memmove+0x24>

080059f8 <_sbrk_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d06      	ldr	r5, [pc, #24]	@ (8005a14 <_sbrk_r+0x1c>)
 80059fc:	2300      	movs	r3, #0
 80059fe:	4604      	mov	r4, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	602b      	str	r3, [r5, #0]
 8005a04:	f7fb fe74 	bl	80016f0 <_sbrk>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_sbrk_r+0x1a>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_sbrk_r+0x1a>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	200003a0 	.word	0x200003a0

08005a18 <memcpy>:
 8005a18:	440a      	add	r2, r1
 8005a1a:	4291      	cmp	r1, r2
 8005a1c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a20:	d100      	bne.n	8005a24 <memcpy+0xc>
 8005a22:	4770      	bx	lr
 8005a24:	b510      	push	{r4, lr}
 8005a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2e:	4291      	cmp	r1, r2
 8005a30:	d1f9      	bne.n	8005a26 <memcpy+0xe>
 8005a32:	bd10      	pop	{r4, pc}

08005a34 <_realloc_r>:
 8005a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a38:	4680      	mov	r8, r0
 8005a3a:	4615      	mov	r5, r2
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	b921      	cbnz	r1, 8005a4a <_realloc_r+0x16>
 8005a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	4611      	mov	r1, r2
 8005a46:	f7ff bc4b 	b.w	80052e0 <_malloc_r>
 8005a4a:	b92a      	cbnz	r2, 8005a58 <_realloc_r+0x24>
 8005a4c:	f7ff fbdc 	bl	8005208 <_free_r>
 8005a50:	2400      	movs	r4, #0
 8005a52:	4620      	mov	r0, r4
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a58:	f000 f81a 	bl	8005a90 <_malloc_usable_size_r>
 8005a5c:	4285      	cmp	r5, r0
 8005a5e:	4606      	mov	r6, r0
 8005a60:	d802      	bhi.n	8005a68 <_realloc_r+0x34>
 8005a62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a66:	d8f4      	bhi.n	8005a52 <_realloc_r+0x1e>
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	f7ff fc38 	bl	80052e0 <_malloc_r>
 8005a70:	4607      	mov	r7, r0
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d0ec      	beq.n	8005a50 <_realloc_r+0x1c>
 8005a76:	42b5      	cmp	r5, r6
 8005a78:	462a      	mov	r2, r5
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	bf28      	it	cs
 8005a7e:	4632      	movcs	r2, r6
 8005a80:	f7ff ffca 	bl	8005a18 <memcpy>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4640      	mov	r0, r8
 8005a88:	f7ff fbbe 	bl	8005208 <_free_r>
 8005a8c:	463c      	mov	r4, r7
 8005a8e:	e7e0      	b.n	8005a52 <_realloc_r+0x1e>

08005a90 <_malloc_usable_size_r>:
 8005a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a94:	1f18      	subs	r0, r3, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bfbc      	itt	lt
 8005a9a:	580b      	ldrlt	r3, [r1, r0]
 8005a9c:	18c0      	addlt	r0, r0, r3
 8005a9e:	4770      	bx	lr

08005aa0 <_init>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr

08005aac <_fini>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr
